-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rx_axis_words25 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    axis_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    axis_V_V_TVALID : IN STD_LOGIC;
    axis_V_V_TREADY : OUT STD_LOGIC;
    loop_count_V : IN STD_LOGIC_VECTOR (12 downto 0);
    final_burst_length_V : IN STD_LOGIC_VECTOR (9 downto 0);
    val_assign : IN STD_LOGIC_VECTOR (12 downto 0);
    cache_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    cache_V_ce0 : OUT STD_LOGIC;
    cache_V_we0 : OUT STD_LOGIC;
    cache_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    rx_buffer_V_offset : IN STD_LOGIC_VECTOR (28 downto 0);
    rx_buffer_V_offset_out_din : OUT STD_LOGIC_VECTOR (28 downto 0);
    rx_buffer_V_offset_out_full_n : IN STD_LOGIC;
    rx_buffer_V_offset_out_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (20 downto 0) );
end;


architecture behav of rx_axis_words25 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal axis_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_i_i_i_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_i_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rx_buffer_V_offset_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_i_i_i_reg_136 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_160_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_247 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_i_i_i_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_i_i_i_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op33_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_202_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_261 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_i_i_i_i_phi_fu_140_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_i_i_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_092_1_i_i_i_fu_82 : STD_LOGIC_VECTOR (9 downto 0);
    signal final_burst_length_V_4_fu_184_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_length_V_1_i_i_s_fu_217_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_cast_i_i_i_fu_164_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_i_i_i_fu_174_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_fu_168_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_99 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((rx_buffer_V_offset_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((rx_buffer_V_offset_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_99)) then
                if (((tmp_3_i_i_i_fu_211_p2 = ap_const_lv1_0) and (exitcond1_i_i_i_fu_196_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 <= axis_V_V_TDATA;
                elsif (((tmp_3_i_i_i_fu_211_p2 = ap_const_lv1_1) and (exitcond1_i_i_i_fu_196_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 <= ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148;
                end if;
            end if; 
        end if;
    end process;

    i_i_i_i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rx_buffer_V_offset_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_i_i_reg_136 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_i_i_i_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_i_i_i_reg_136 <= i_reg_261;
            end if; 
        end if;
    end process;

    p_092_1_i_i_i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op33_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_092_1_i_i_i_fu_82 <= data_length_V_1_i_i_s_fu_217_p2;
            elsif (((rx_buffer_V_offset_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_092_1_i_i_i_fu_82 <= final_burst_length_V_4_fu_184_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_i_i_i_reg_257 <= exitcond1_i_i_i_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_261 <= i_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_i_i_i_reg_252 <= tmp_i_i_i_fu_178_p2;
                tmp_reg_247 <= tmp_fu_160_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, rx_buffer_V_offset_out_full_n, ap_enable_reg_pp0_iter0, exitcond1_i_i_i_fu_196_p2, ap_CS_fsm_state2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((rx_buffer_V_offset_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond1_i_i_i_fu_196_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond1_i_i_i_fu_196_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(axis_V_V_TVALID, ap_enable_reg_pp0_iter0, ap_predicate_op33_read_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((axis_V_V_TVALID = ap_const_logic_0) and (ap_predicate_op33_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(axis_V_V_TVALID, ap_enable_reg_pp0_iter0, ap_predicate_op33_read_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((axis_V_V_TVALID = ap_const_logic_0) and (ap_predicate_op33_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(axis_V_V_TVALID, ap_predicate_op33_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((axis_V_V_TVALID = ap_const_logic_0) and (ap_predicate_op33_read_state3 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_99_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_99 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond1_i_i_i_fu_196_p2)
    begin
        if ((exitcond1_i_i_i_fu_196_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_i_i_phi_fu_140_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_i_i_i_reg_136, exitcond1_i_i_i_reg_257, i_reg_261, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond1_i_i_i_reg_257 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_i_i_i_phi_fu_140_p4 <= i_reg_261;
        else 
            ap_phi_mux_i_i_i_i_phi_fu_140_p4 <= i_i_i_i_reg_136;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op33_read_state3_assign_proc : process(exitcond1_i_i_i_fu_196_p2, tmp_3_i_i_i_fu_211_p2)
    begin
                ap_predicate_op33_read_state3 <= ((tmp_3_i_i_i_fu_211_p2 = ap_const_lv1_0) and (exitcond1_i_i_i_fu_196_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (tmp_reg_247 & ap_const_lv9_0);

    axis_V_V_TDATA_blk_n_assign_proc : process(axis_V_V_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, exitcond1_i_i_i_fu_196_p2, tmp_3_i_i_i_fu_211_p2)
    begin
        if (((tmp_3_i_i_i_fu_211_p2 = ap_const_lv1_0) and (exitcond1_i_i_i_fu_196_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            axis_V_V_TDATA_blk_n <= axis_V_V_TVALID;
        else 
            axis_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    axis_V_V_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op33_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op33_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            axis_V_V_TREADY <= ap_const_logic_1;
        else 
            axis_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_address0 <= tmp_5_i_i_i_fu_228_p1(9 - 1 downto 0);

    cache_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            cache_V_ce0 <= ap_const_logic_1;
        else 
            cache_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_d0 <= ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148;

    cache_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, exitcond1_i_i_i_reg_257, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_i_i_i_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            cache_V_we0 <= ap_const_logic_1;
        else 
            cache_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_length_V_1_i_i_s_fu_217_p2 <= std_logic_vector(unsigned(p_092_1_i_i_i_fu_82) + unsigned(ap_const_lv10_3FF));
    exitcond1_i_i_i_fu_196_p2 <= "1" when (ap_phi_mux_i_i_i_i_phi_fu_140_p4 = ap_const_lv10_200) else "0";
    final_burst_length_V_4_fu_184_p3 <= 
        final_burst_length_V when (tmp_i_i_i_reg_252(0) = '1') else 
        ap_const_lv10_200;
    i_fu_202_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i_i_i_phi_fu_140_p4) + unsigned(ap_const_lv10_1));
    lhs_V_cast_i_i_i_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_count_V),14));
    r_V_fu_168_p2 <= std_logic_vector(signed(ap_const_lv14_3FFF) + signed(lhs_V_cast_i_i_i_fu_164_p1));

    rx_buffer_V_offset_out_blk_n_assign_proc : process(rx_buffer_V_offset_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rx_buffer_V_offset_out_blk_n <= rx_buffer_V_offset_out_full_n;
        else 
            rx_buffer_V_offset_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rx_buffer_V_offset_out_din <= rx_buffer_V_offset;

    rx_buffer_V_offset_out_write_assign_proc : process(rx_buffer_V_offset_out_full_n, ap_CS_fsm_state2)
    begin
        if (((rx_buffer_V_offset_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rx_buffer_V_offset_out_write <= ap_const_logic_1;
        else 
            rx_buffer_V_offset_out_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_i_i_i_fu_211_p2 <= "1" when (p_092_1_i_i_i_fu_82 = ap_const_lv10_0) else "0";
    tmp_5_i_i_i_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_i_reg_136),64));
    tmp_cast_i_i_i_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_160_p1),14));
    tmp_fu_160_p1 <= val_assign(12 - 1 downto 0);
    tmp_i_i_i_fu_178_p2 <= "1" when (tmp_cast_i_i_i_fu_174_p1 = r_V_fu_168_p2) else "0";
end behav;
