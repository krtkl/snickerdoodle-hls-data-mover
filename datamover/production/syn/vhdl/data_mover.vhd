-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity data_mover is
generic (
    C_M_AXI_DMA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DMA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DMA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_DMA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DMA_USER_VALUE : INTEGER := 0;
    C_M_AXI_DMA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DMA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DMA_AWVALID : OUT STD_LOGIC;
    m_axi_DMA_AWREADY : IN STD_LOGIC;
    m_axi_DMA_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_ADDR_WIDTH-1 downto 0);
    m_axi_DMA_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_ID_WIDTH-1 downto 0);
    m_axi_DMA_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DMA_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DMA_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DMA_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DMA_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DMA_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DMA_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DMA_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DMA_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_AWUSER_WIDTH-1 downto 0);
    m_axi_DMA_WVALID : OUT STD_LOGIC;
    m_axi_DMA_WREADY : IN STD_LOGIC;
    m_axi_DMA_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_DATA_WIDTH-1 downto 0);
    m_axi_DMA_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_DATA_WIDTH/8-1 downto 0);
    m_axi_DMA_WLAST : OUT STD_LOGIC;
    m_axi_DMA_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_ID_WIDTH-1 downto 0);
    m_axi_DMA_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_WUSER_WIDTH-1 downto 0);
    m_axi_DMA_ARVALID : OUT STD_LOGIC;
    m_axi_DMA_ARREADY : IN STD_LOGIC;
    m_axi_DMA_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_ADDR_WIDTH-1 downto 0);
    m_axi_DMA_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_ID_WIDTH-1 downto 0);
    m_axi_DMA_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DMA_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DMA_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DMA_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DMA_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DMA_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DMA_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DMA_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DMA_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA_ARUSER_WIDTH-1 downto 0);
    m_axi_DMA_RVALID : IN STD_LOGIC;
    m_axi_DMA_RREADY : OUT STD_LOGIC;
    m_axi_DMA_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DMA_DATA_WIDTH-1 downto 0);
    m_axi_DMA_RLAST : IN STD_LOGIC;
    m_axi_DMA_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DMA_ID_WIDTH-1 downto 0);
    m_axi_DMA_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DMA_RUSER_WIDTH-1 downto 0);
    m_axi_DMA_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DMA_BVALID : IN STD_LOGIC;
    m_axi_DMA_BREADY : OUT STD_LOGIC;
    m_axi_DMA_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DMA_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DMA_ID_WIDTH-1 downto 0);
    m_axi_DMA_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DMA_BUSER_WIDTH-1 downto 0);
    data_rx_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    data_rx_V_V_TVALID : IN STD_LOGIC;
    data_rx_V_V_TREADY : OUT STD_LOGIC;
    data_tx_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_tx_V_V_TVALID : OUT STD_LOGIC;
    data_tx_V_V_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of data_mover is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "data_mover,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-3,HLS_INPUT_CLOCK=6.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.714125,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1593,HLS_SYN_LUT=2328}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_rx_V_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal data_rx_V_V_0_vld_in : STD_LOGIC;
    signal data_rx_V_V_0_vld_out : STD_LOGIC;
    signal data_rx_V_V_0_ack_in : STD_LOGIC;
    signal data_rx_V_V_0_ack_out : STD_LOGIC;
    signal data_rx_V_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal data_rx_V_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal data_rx_V_V_0_sel_rd : STD_LOGIC := '0';
    signal data_rx_V_V_0_sel_wr : STD_LOGIC := '0';
    signal data_rx_V_V_0_sel : STD_LOGIC;
    signal data_rx_V_V_0_load_A : STD_LOGIC;
    signal data_rx_V_V_0_load_B : STD_LOGIC;
    signal data_rx_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_rx_V_V_0_state_cmp_full : STD_LOGIC;
    signal data_tx_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal data_tx_V_V_1_vld_in : STD_LOGIC;
    signal data_tx_V_V_1_vld_out : STD_LOGIC;
    signal data_tx_V_V_1_ack_in : STD_LOGIC;
    signal data_tx_V_V_1_ack_out : STD_LOGIC;
    signal data_tx_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal data_tx_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal data_tx_V_V_1_sel_rd : STD_LOGIC := '0';
    signal data_tx_V_V_1_sel_wr : STD_LOGIC := '0';
    signal data_tx_V_V_1_sel : STD_LOGIC;
    signal data_tx_V_V_1_load_A : STD_LOGIC;
    signal data_tx_V_V_1_load_B : STD_LOGIC;
    signal data_tx_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_tx_V_V_1_state_cmp_full : STD_LOGIC;
    signal tx_buffer_V : STD_LOGIC_VECTOR (31 downto 0);
    signal tx_buffer_length_V : STD_LOGIC_VECTOR (21 downto 0);
    signal rx_buffer_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rx_buffer_length_V : STD_LOGIC_VECTOR (21 downto 0);
    signal DMA_AWVALID : STD_LOGIC;
    signal DMA_AWREADY : STD_LOGIC;
    signal DMA_WVALID : STD_LOGIC;
    signal DMA_WREADY : STD_LOGIC;
    signal DMA_ARVALID : STD_LOGIC;
    signal DMA_ARREADY : STD_LOGIC;
    signal DMA_RVALID : STD_LOGIC;
    signal DMA_RREADY : STD_LOGIC;
    signal DMA_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal DMA_RLAST : STD_LOGIC;
    signal DMA_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DMA_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DMA_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DMA_BVALID : STD_LOGIC;
    signal DMA_BREADY : STD_LOGIC;
    signal DMA_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DMA_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DMA_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal rx_buffer_V3_reg_234 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tx_buffer_V1_reg_239 : STD_LOGIC_VECTOR (28 downto 0);
    signal tx_final_burst_lengt_fu_168_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tx_final_burst_lengt_reg_244 : STD_LOGIC_VECTOR (9 downto 0);
    signal tx_loop_count_V_fu_177_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tx_loop_count_V_reg_249 : STD_LOGIC_VECTOR (12 downto 0);
    signal rx_final_burst_lengt_fu_216_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal rx_final_burst_lengt_reg_254 : STD_LOGIC_VECTOR (9 downto 0);
    signal rx_loop_count_V_fu_225_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal rx_loop_count_V_reg_259 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWVALID : STD_LOGIC;
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_WVALID : STD_LOGIC;
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_WLAST : STD_LOGIC;
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARVALID : STD_LOGIC;
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_RREADY : STD_LOGIC;
    signal grp_rx_loop_fu_94_m_axi_rx_buffer_V_BREADY : STD_LOGIC;
    signal grp_rx_loop_fu_94_axis_V_V_TVALID : STD_LOGIC;
    signal grp_rx_loop_fu_94_axis_V_V_TREADY : STD_LOGIC;
    signal grp_rx_loop_fu_94_ap_done : STD_LOGIC;
    signal grp_rx_loop_fu_94_ap_start : STD_LOGIC;
    signal grp_rx_loop_fu_94_ap_ready : STD_LOGIC;
    signal grp_rx_loop_fu_94_ap_idle : STD_LOGIC;
    signal grp_rx_loop_fu_94_ap_continue : STD_LOGIC;
    signal grp_tx_loop_fu_105_axis_V_V_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWVALID : STD_LOGIC;
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_WVALID : STD_LOGIC;
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_WLAST : STD_LOGIC;
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARVALID : STD_LOGIC;
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_RREADY : STD_LOGIC;
    signal grp_tx_loop_fu_105_m_axi_tx_buffer_V_BREADY : STD_LOGIC;
    signal grp_tx_loop_fu_105_axis_V_V_TVALID : STD_LOGIC;
    signal grp_tx_loop_fu_105_axis_V_V_TREADY : STD_LOGIC;
    signal grp_tx_loop_fu_105_ap_done : STD_LOGIC;
    signal grp_tx_loop_fu_105_ap_start : STD_LOGIC;
    signal grp_tx_loop_fu_105_ap_ready : STD_LOGIC;
    signal grp_tx_loop_fu_105_ap_idle : STD_LOGIC;
    signal grp_tx_loop_fu_105_ap_continue : STD_LOGIC;
    signal grp_rx_loop_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_tx_loop_fu_105_ap_ready : STD_LOGIC;
    signal ap_sync_grp_tx_loop_fu_105_ap_done : STD_LOGIC;
    signal ap_sync_grp_rx_loop_fu_94_ap_ready : STD_LOGIC;
    signal ap_sync_grp_rx_loop_fu_94_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_rx_loop_fu_94_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_rx_loop_fu_94_ap_done : STD_LOGIC := '0';
    signal grp_tx_loop_fu_105_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_tx_loop_fu_105_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_tx_loop_fu_105_ap_done : STD_LOGIC := '0';
    signal r_V_fu_138_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_i_fu_148_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_cast_fu_158_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_i_fu_162_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_1_fu_186_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_i1_fu_196_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i1_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i16_cast_fu_206_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_i1_fu_210_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component rx_loop IS
    port (
        axis_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        loop_count_V : IN STD_LOGIC_VECTOR (12 downto 0);
        final_burst_length_V : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_rx_buffer_V_AWVALID : OUT STD_LOGIC;
        m_axi_rx_buffer_V_AWREADY : IN STD_LOGIC;
        m_axi_rx_buffer_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rx_buffer_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rx_buffer_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rx_buffer_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rx_buffer_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rx_buffer_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rx_buffer_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rx_buffer_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rx_buffer_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rx_buffer_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rx_buffer_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rx_buffer_V_WVALID : OUT STD_LOGIC;
        m_axi_rx_buffer_V_WREADY : IN STD_LOGIC;
        m_axi_rx_buffer_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rx_buffer_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_rx_buffer_V_WLAST : OUT STD_LOGIC;
        m_axi_rx_buffer_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rx_buffer_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rx_buffer_V_ARVALID : OUT STD_LOGIC;
        m_axi_rx_buffer_V_ARREADY : IN STD_LOGIC;
        m_axi_rx_buffer_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rx_buffer_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rx_buffer_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rx_buffer_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rx_buffer_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rx_buffer_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rx_buffer_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rx_buffer_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rx_buffer_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rx_buffer_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rx_buffer_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rx_buffer_V_RVALID : IN STD_LOGIC;
        m_axi_rx_buffer_V_RREADY : OUT STD_LOGIC;
        m_axi_rx_buffer_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rx_buffer_V_RLAST : IN STD_LOGIC;
        m_axi_rx_buffer_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rx_buffer_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rx_buffer_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rx_buffer_V_BVALID : IN STD_LOGIC;
        m_axi_rx_buffer_V_BREADY : OUT STD_LOGIC;
        m_axi_rx_buffer_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rx_buffer_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rx_buffer_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rx_buffer_V_offset : IN STD_LOGIC_VECTOR (28 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        axis_V_V_TVALID : IN STD_LOGIC;
        axis_V_V_TREADY : OUT STD_LOGIC;
        loop_count_V_ap_vld : IN STD_LOGIC;
        final_burst_length_V_ap_vld : IN STD_LOGIC;
        rx_buffer_V_offset_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component tx_loop IS
    port (
        axis_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_tx_buffer_V_AWVALID : OUT STD_LOGIC;
        m_axi_tx_buffer_V_AWREADY : IN STD_LOGIC;
        m_axi_tx_buffer_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_tx_buffer_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tx_buffer_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_tx_buffer_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_tx_buffer_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tx_buffer_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tx_buffer_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tx_buffer_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_tx_buffer_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tx_buffer_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tx_buffer_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tx_buffer_V_WVALID : OUT STD_LOGIC;
        m_axi_tx_buffer_V_WREADY : IN STD_LOGIC;
        m_axi_tx_buffer_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_tx_buffer_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_tx_buffer_V_WLAST : OUT STD_LOGIC;
        m_axi_tx_buffer_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tx_buffer_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tx_buffer_V_ARVALID : OUT STD_LOGIC;
        m_axi_tx_buffer_V_ARREADY : IN STD_LOGIC;
        m_axi_tx_buffer_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_tx_buffer_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tx_buffer_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_tx_buffer_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_tx_buffer_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tx_buffer_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tx_buffer_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tx_buffer_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_tx_buffer_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tx_buffer_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tx_buffer_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tx_buffer_V_RVALID : IN STD_LOGIC;
        m_axi_tx_buffer_V_RREADY : OUT STD_LOGIC;
        m_axi_tx_buffer_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_tx_buffer_V_RLAST : IN STD_LOGIC;
        m_axi_tx_buffer_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tx_buffer_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tx_buffer_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tx_buffer_V_BVALID : IN STD_LOGIC;
        m_axi_tx_buffer_V_BREADY : OUT STD_LOGIC;
        m_axi_tx_buffer_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tx_buffer_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tx_buffer_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        tx_buffer_V_offset : IN STD_LOGIC_VECTOR (28 downto 0);
        loop_count_V : IN STD_LOGIC_VECTOR (12 downto 0);
        final_burst_length_V : IN STD_LOGIC_VECTOR (9 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        tx_buffer_V_offset_ap_vld : IN STD_LOGIC;
        loop_count_V_ap_vld : IN STD_LOGIC;
        final_burst_length_V_ap_vld : IN STD_LOGIC;
        axis_V_V_TVALID : OUT STD_LOGIC;
        axis_V_V_TREADY : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component data_mover_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        tx_buffer_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        tx_buffer_length_V : OUT STD_LOGIC_VECTOR (21 downto 0);
        rx_buffer_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rx_buffer_length_V : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component data_mover_DMA_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    data_mover_control_s_axi_U : component data_mover_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        tx_buffer_V => tx_buffer_V,
        tx_buffer_length_V => tx_buffer_length_V,
        rx_buffer_V => rx_buffer_V,
        rx_buffer_length_V => rx_buffer_length_V);

    data_mover_DMA_m_axi_U : component data_mover_DMA_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DMA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DMA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DMA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DMA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DMA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DMA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DMA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DMA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DMA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DMA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DMA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DMA_AWVALID,
        AWREADY => m_axi_DMA_AWREADY,
        AWADDR => m_axi_DMA_AWADDR,
        AWID => m_axi_DMA_AWID,
        AWLEN => m_axi_DMA_AWLEN,
        AWSIZE => m_axi_DMA_AWSIZE,
        AWBURST => m_axi_DMA_AWBURST,
        AWLOCK => m_axi_DMA_AWLOCK,
        AWCACHE => m_axi_DMA_AWCACHE,
        AWPROT => m_axi_DMA_AWPROT,
        AWQOS => m_axi_DMA_AWQOS,
        AWREGION => m_axi_DMA_AWREGION,
        AWUSER => m_axi_DMA_AWUSER,
        WVALID => m_axi_DMA_WVALID,
        WREADY => m_axi_DMA_WREADY,
        WDATA => m_axi_DMA_WDATA,
        WSTRB => m_axi_DMA_WSTRB,
        WLAST => m_axi_DMA_WLAST,
        WID => m_axi_DMA_WID,
        WUSER => m_axi_DMA_WUSER,
        ARVALID => m_axi_DMA_ARVALID,
        ARREADY => m_axi_DMA_ARREADY,
        ARADDR => m_axi_DMA_ARADDR,
        ARID => m_axi_DMA_ARID,
        ARLEN => m_axi_DMA_ARLEN,
        ARSIZE => m_axi_DMA_ARSIZE,
        ARBURST => m_axi_DMA_ARBURST,
        ARLOCK => m_axi_DMA_ARLOCK,
        ARCACHE => m_axi_DMA_ARCACHE,
        ARPROT => m_axi_DMA_ARPROT,
        ARQOS => m_axi_DMA_ARQOS,
        ARREGION => m_axi_DMA_ARREGION,
        ARUSER => m_axi_DMA_ARUSER,
        RVALID => m_axi_DMA_RVALID,
        RREADY => m_axi_DMA_RREADY,
        RDATA => m_axi_DMA_RDATA,
        RLAST => m_axi_DMA_RLAST,
        RID => m_axi_DMA_RID,
        RUSER => m_axi_DMA_RUSER,
        RRESP => m_axi_DMA_RRESP,
        BVALID => m_axi_DMA_BVALID,
        BREADY => m_axi_DMA_BREADY,
        BRESP => m_axi_DMA_BRESP,
        BID => m_axi_DMA_BID,
        BUSER => m_axi_DMA_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DMA_ARVALID,
        I_ARREADY => DMA_ARREADY,
        I_ARADDR => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARADDR,
        I_ARID => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARID,
        I_ARLEN => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARLEN,
        I_ARSIZE => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARSIZE,
        I_ARLOCK => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARLOCK,
        I_ARCACHE => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARCACHE,
        I_ARQOS => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARQOS,
        I_ARPROT => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARPROT,
        I_ARUSER => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARUSER,
        I_ARBURST => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARBURST,
        I_ARREGION => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARREGION,
        I_RVALID => DMA_RVALID,
        I_RREADY => DMA_RREADY,
        I_RDATA => DMA_RDATA,
        I_RID => DMA_RID,
        I_RUSER => DMA_RUSER,
        I_RRESP => DMA_RRESP,
        I_RLAST => DMA_RLAST,
        I_AWVALID => DMA_AWVALID,
        I_AWREADY => DMA_AWREADY,
        I_AWADDR => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWADDR,
        I_AWID => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWID,
        I_AWLEN => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWLEN,
        I_AWSIZE => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWSIZE,
        I_AWLOCK => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWLOCK,
        I_AWCACHE => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWCACHE,
        I_AWQOS => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWQOS,
        I_AWPROT => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWPROT,
        I_AWUSER => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWUSER,
        I_AWBURST => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWBURST,
        I_AWREGION => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWREGION,
        I_WVALID => DMA_WVALID,
        I_WREADY => DMA_WREADY,
        I_WDATA => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WDATA,
        I_WID => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WID,
        I_WUSER => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WUSER,
        I_WLAST => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WLAST,
        I_WSTRB => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WSTRB,
        I_BVALID => DMA_BVALID,
        I_BREADY => DMA_BREADY,
        I_BRESP => DMA_BRESP,
        I_BID => DMA_BID,
        I_BUSER => DMA_BUSER);

    grp_rx_loop_fu_94 : component rx_loop
    port map (
        axis_V_V_TDATA => data_rx_V_V_0_data_out,
        loop_count_V => rx_loop_count_V_reg_259,
        final_burst_length_V => rx_final_burst_lengt_reg_254,
        m_axi_rx_buffer_V_AWVALID => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWVALID,
        m_axi_rx_buffer_V_AWREADY => DMA_AWREADY,
        m_axi_rx_buffer_V_AWADDR => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWADDR,
        m_axi_rx_buffer_V_AWID => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWID,
        m_axi_rx_buffer_V_AWLEN => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWLEN,
        m_axi_rx_buffer_V_AWSIZE => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWSIZE,
        m_axi_rx_buffer_V_AWBURST => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWBURST,
        m_axi_rx_buffer_V_AWLOCK => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWLOCK,
        m_axi_rx_buffer_V_AWCACHE => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWCACHE,
        m_axi_rx_buffer_V_AWPROT => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWPROT,
        m_axi_rx_buffer_V_AWQOS => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWQOS,
        m_axi_rx_buffer_V_AWREGION => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWREGION,
        m_axi_rx_buffer_V_AWUSER => grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWUSER,
        m_axi_rx_buffer_V_WVALID => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WVALID,
        m_axi_rx_buffer_V_WREADY => DMA_WREADY,
        m_axi_rx_buffer_V_WDATA => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WDATA,
        m_axi_rx_buffer_V_WSTRB => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WSTRB,
        m_axi_rx_buffer_V_WLAST => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WLAST,
        m_axi_rx_buffer_V_WID => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WID,
        m_axi_rx_buffer_V_WUSER => grp_rx_loop_fu_94_m_axi_rx_buffer_V_WUSER,
        m_axi_rx_buffer_V_ARVALID => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARVALID,
        m_axi_rx_buffer_V_ARREADY => ap_const_logic_0,
        m_axi_rx_buffer_V_ARADDR => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARADDR,
        m_axi_rx_buffer_V_ARID => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARID,
        m_axi_rx_buffer_V_ARLEN => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARLEN,
        m_axi_rx_buffer_V_ARSIZE => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARSIZE,
        m_axi_rx_buffer_V_ARBURST => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARBURST,
        m_axi_rx_buffer_V_ARLOCK => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARLOCK,
        m_axi_rx_buffer_V_ARCACHE => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARCACHE,
        m_axi_rx_buffer_V_ARPROT => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARPROT,
        m_axi_rx_buffer_V_ARQOS => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARQOS,
        m_axi_rx_buffer_V_ARREGION => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARREGION,
        m_axi_rx_buffer_V_ARUSER => grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARUSER,
        m_axi_rx_buffer_V_RVALID => ap_const_logic_0,
        m_axi_rx_buffer_V_RREADY => grp_rx_loop_fu_94_m_axi_rx_buffer_V_RREADY,
        m_axi_rx_buffer_V_RDATA => ap_const_lv64_0,
        m_axi_rx_buffer_V_RLAST => ap_const_logic_0,
        m_axi_rx_buffer_V_RID => ap_const_lv1_0,
        m_axi_rx_buffer_V_RUSER => ap_const_lv1_0,
        m_axi_rx_buffer_V_RRESP => ap_const_lv2_0,
        m_axi_rx_buffer_V_BVALID => DMA_BVALID,
        m_axi_rx_buffer_V_BREADY => grp_rx_loop_fu_94_m_axi_rx_buffer_V_BREADY,
        m_axi_rx_buffer_V_BRESP => DMA_BRESP,
        m_axi_rx_buffer_V_BID => DMA_BID,
        m_axi_rx_buffer_V_BUSER => DMA_BUSER,
        rx_buffer_V_offset => rx_buffer_V3_reg_234,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        axis_V_V_TVALID => grp_rx_loop_fu_94_axis_V_V_TVALID,
        axis_V_V_TREADY => grp_rx_loop_fu_94_axis_V_V_TREADY,
        loop_count_V_ap_vld => ap_const_logic_1,
        final_burst_length_V_ap_vld => ap_const_logic_1,
        rx_buffer_V_offset_ap_vld => ap_const_logic_1,
        ap_done => grp_rx_loop_fu_94_ap_done,
        ap_start => grp_rx_loop_fu_94_ap_start,
        ap_ready => grp_rx_loop_fu_94_ap_ready,
        ap_idle => grp_rx_loop_fu_94_ap_idle,
        ap_continue => grp_rx_loop_fu_94_ap_continue);

    grp_tx_loop_fu_105 : component tx_loop
    port map (
        axis_V_V_TDATA => grp_tx_loop_fu_105_axis_V_V_TDATA,
        m_axi_tx_buffer_V_AWVALID => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWVALID,
        m_axi_tx_buffer_V_AWREADY => ap_const_logic_0,
        m_axi_tx_buffer_V_AWADDR => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWADDR,
        m_axi_tx_buffer_V_AWID => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWID,
        m_axi_tx_buffer_V_AWLEN => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWLEN,
        m_axi_tx_buffer_V_AWSIZE => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWSIZE,
        m_axi_tx_buffer_V_AWBURST => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWBURST,
        m_axi_tx_buffer_V_AWLOCK => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWLOCK,
        m_axi_tx_buffer_V_AWCACHE => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWCACHE,
        m_axi_tx_buffer_V_AWPROT => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWPROT,
        m_axi_tx_buffer_V_AWQOS => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWQOS,
        m_axi_tx_buffer_V_AWREGION => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWREGION,
        m_axi_tx_buffer_V_AWUSER => grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWUSER,
        m_axi_tx_buffer_V_WVALID => grp_tx_loop_fu_105_m_axi_tx_buffer_V_WVALID,
        m_axi_tx_buffer_V_WREADY => ap_const_logic_0,
        m_axi_tx_buffer_V_WDATA => grp_tx_loop_fu_105_m_axi_tx_buffer_V_WDATA,
        m_axi_tx_buffer_V_WSTRB => grp_tx_loop_fu_105_m_axi_tx_buffer_V_WSTRB,
        m_axi_tx_buffer_V_WLAST => grp_tx_loop_fu_105_m_axi_tx_buffer_V_WLAST,
        m_axi_tx_buffer_V_WID => grp_tx_loop_fu_105_m_axi_tx_buffer_V_WID,
        m_axi_tx_buffer_V_WUSER => grp_tx_loop_fu_105_m_axi_tx_buffer_V_WUSER,
        m_axi_tx_buffer_V_ARVALID => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARVALID,
        m_axi_tx_buffer_V_ARREADY => DMA_ARREADY,
        m_axi_tx_buffer_V_ARADDR => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARADDR,
        m_axi_tx_buffer_V_ARID => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARID,
        m_axi_tx_buffer_V_ARLEN => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARLEN,
        m_axi_tx_buffer_V_ARSIZE => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARSIZE,
        m_axi_tx_buffer_V_ARBURST => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARBURST,
        m_axi_tx_buffer_V_ARLOCK => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARLOCK,
        m_axi_tx_buffer_V_ARCACHE => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARCACHE,
        m_axi_tx_buffer_V_ARPROT => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARPROT,
        m_axi_tx_buffer_V_ARQOS => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARQOS,
        m_axi_tx_buffer_V_ARREGION => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARREGION,
        m_axi_tx_buffer_V_ARUSER => grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARUSER,
        m_axi_tx_buffer_V_RVALID => DMA_RVALID,
        m_axi_tx_buffer_V_RREADY => grp_tx_loop_fu_105_m_axi_tx_buffer_V_RREADY,
        m_axi_tx_buffer_V_RDATA => DMA_RDATA,
        m_axi_tx_buffer_V_RLAST => DMA_RLAST,
        m_axi_tx_buffer_V_RID => DMA_RID,
        m_axi_tx_buffer_V_RUSER => DMA_RUSER,
        m_axi_tx_buffer_V_RRESP => DMA_RRESP,
        m_axi_tx_buffer_V_BVALID => ap_const_logic_0,
        m_axi_tx_buffer_V_BREADY => grp_tx_loop_fu_105_m_axi_tx_buffer_V_BREADY,
        m_axi_tx_buffer_V_BRESP => ap_const_lv2_0,
        m_axi_tx_buffer_V_BID => ap_const_lv1_0,
        m_axi_tx_buffer_V_BUSER => ap_const_lv1_0,
        tx_buffer_V_offset => tx_buffer_V1_reg_239,
        loop_count_V => tx_loop_count_V_reg_249,
        final_burst_length_V => tx_final_burst_lengt_reg_244,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        tx_buffer_V_offset_ap_vld => ap_const_logic_1,
        loop_count_V_ap_vld => ap_const_logic_1,
        final_burst_length_V_ap_vld => ap_const_logic_1,
        axis_V_V_TVALID => grp_tx_loop_fu_105_axis_V_V_TVALID,
        axis_V_V_TREADY => grp_tx_loop_fu_105_axis_V_V_TREADY,
        ap_done => grp_tx_loop_fu_105_ap_done,
        ap_start => grp_tx_loop_fu_105_ap_start,
        ap_ready => grp_tx_loop_fu_105_ap_ready,
        ap_idle => grp_tx_loop_fu_105_ap_idle,
        ap_continue => grp_tx_loop_fu_105_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_rx_loop_fu_94_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_rx_loop_fu_94_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_rx_loop_fu_94_ap_done <= ap_const_logic_0;
                elsif ((grp_rx_loop_fu_94_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_rx_loop_fu_94_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_rx_loop_fu_94_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_rx_loop_fu_94_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_rx_loop_fu_94_ap_ready <= ap_const_logic_0;
                elsif ((grp_rx_loop_fu_94_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_rx_loop_fu_94_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_tx_loop_fu_105_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_tx_loop_fu_105_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_tx_loop_fu_105_ap_done <= ap_const_logic_0;
                elsif ((grp_tx_loop_fu_105_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_tx_loop_fu_105_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_tx_loop_fu_105_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_tx_loop_fu_105_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_tx_loop_fu_105_ap_ready <= ap_const_logic_0;
                elsif ((grp_tx_loop_fu_105_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_tx_loop_fu_105_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    data_rx_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_rx_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((data_rx_V_V_0_ack_out = ap_const_logic_1) and (data_rx_V_V_0_vld_out = ap_const_logic_1))) then 
                                        data_rx_V_V_0_sel_rd <= not(data_rx_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_rx_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_rx_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((data_rx_V_V_0_ack_in = ap_const_logic_1) and (data_rx_V_V_0_vld_in = ap_const_logic_1))) then 
                                        data_rx_V_V_0_sel_wr <= not(data_rx_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_rx_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_rx_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((data_rx_V_V_0_state = ap_const_lv2_2) and (data_rx_V_V_0_vld_in = ap_const_logic_0)) or ((data_rx_V_V_0_state = ap_const_lv2_3) and (data_rx_V_V_0_vld_in = ap_const_logic_0) and (data_rx_V_V_0_ack_out = ap_const_logic_1)))) then 
                    data_rx_V_V_0_state <= ap_const_lv2_2;
                elsif ((((data_rx_V_V_0_state = ap_const_lv2_1) and (data_rx_V_V_0_ack_out = ap_const_logic_0)) or ((data_rx_V_V_0_state = ap_const_lv2_3) and (data_rx_V_V_0_ack_out = ap_const_logic_0) and (data_rx_V_V_0_vld_in = ap_const_logic_1)))) then 
                    data_rx_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((data_rx_V_V_0_vld_in = ap_const_logic_0) and (data_rx_V_V_0_ack_out = ap_const_logic_1))) and not(((data_rx_V_V_0_ack_out = ap_const_logic_0) and (data_rx_V_V_0_vld_in = ap_const_logic_1))) and (data_rx_V_V_0_state = ap_const_lv2_3)) or ((data_rx_V_V_0_state = ap_const_lv2_1) and (data_rx_V_V_0_ack_out = ap_const_logic_1)) or ((data_rx_V_V_0_state = ap_const_lv2_2) and (data_rx_V_V_0_vld_in = ap_const_logic_1)))) then 
                    data_rx_V_V_0_state <= ap_const_lv2_3;
                else 
                    data_rx_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_tx_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_tx_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_tx_V_V_1_ack_out = ap_const_logic_1) and (data_tx_V_V_1_vld_out = ap_const_logic_1))) then 
                                        data_tx_V_V_1_sel_rd <= not(data_tx_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_tx_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_tx_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((data_tx_V_V_1_ack_in = ap_const_logic_1) and (data_tx_V_V_1_vld_in = ap_const_logic_1))) then 
                                        data_tx_V_V_1_sel_wr <= not(data_tx_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_tx_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_tx_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_tx_V_V_1_vld_in = ap_const_logic_0) and (data_tx_V_V_1_state = ap_const_lv2_2)) or ((data_tx_V_V_1_vld_in = ap_const_logic_0) and (data_tx_V_V_1_ack_out = ap_const_logic_1) and (data_tx_V_V_1_state = ap_const_lv2_3)))) then 
                    data_tx_V_V_1_state <= ap_const_lv2_2;
                elsif ((((data_tx_V_V_1_ack_out = ap_const_logic_0) and (data_tx_V_V_1_state = ap_const_lv2_1)) or ((data_tx_V_V_1_ack_out = ap_const_logic_0) and (data_tx_V_V_1_vld_in = ap_const_logic_1) and (data_tx_V_V_1_state = ap_const_lv2_3)))) then 
                    data_tx_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_tx_V_V_1_vld_in = ap_const_logic_0) and (data_tx_V_V_1_ack_out = ap_const_logic_1))) and not(((data_tx_V_V_1_ack_out = ap_const_logic_0) and (data_tx_V_V_1_vld_in = ap_const_logic_1))) and (data_tx_V_V_1_state = ap_const_lv2_3)) or ((data_tx_V_V_1_ack_out = ap_const_logic_1) and (data_tx_V_V_1_state = ap_const_lv2_1)) or ((data_tx_V_V_1_vld_in = ap_const_logic_1) and (data_tx_V_V_1_state = ap_const_lv2_2)))) then 
                    data_tx_V_V_1_state <= ap_const_lv2_3;
                else 
                    data_tx_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_rx_loop_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_rx_loop_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_rx_loop_fu_94_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_rx_loop_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rx_loop_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_rx_loop_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tx_loop_fu_105_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_tx_loop_fu_105_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_tx_loop_fu_105_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_tx_loop_fu_105_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tx_loop_fu_105_ap_ready = ap_const_logic_1)) then 
                    grp_tx_loop_fu_105_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_rx_V_V_0_load_A = ap_const_logic_1)) then
                data_rx_V_V_0_payload_A <= data_rx_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_rx_V_V_0_load_B = ap_const_logic_1)) then
                data_rx_V_V_0_payload_B <= data_rx_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_tx_V_V_1_load_A = ap_const_logic_1)) then
                data_tx_V_V_1_payload_A <= grp_tx_loop_fu_105_axis_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_tx_V_V_1_load_B = ap_const_logic_1)) then
                data_tx_V_V_1_payload_B <= grp_tx_loop_fu_105_axis_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                rx_buffer_V3_reg_234 <= rx_buffer_V(31 downto 3);
                rx_final_burst_lengt_reg_254 <= rx_final_burst_lengt_fu_216_p3;
                rx_loop_count_V_reg_259 <= rx_loop_count_V_fu_225_p3;
                tx_buffer_V1_reg_239 <= tx_buffer_V(31 downto 3);
                tx_final_burst_lengt_reg_244 <= tx_final_burst_lengt_fu_168_p3;
                tx_loop_count_V_reg_249 <= tx_loop_count_V_fu_177_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data_tx_V_V_1_ack_in, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (data_tx_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    DMA_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DMA_ARVALID <= grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARVALID;
        else 
            DMA_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DMA_AWVALID_assign_proc : process(ap_CS_fsm_state2, grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DMA_AWVALID <= grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWVALID;
        else 
            DMA_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DMA_BREADY_assign_proc : process(ap_CS_fsm_state2, grp_rx_loop_fu_94_m_axi_rx_buffer_V_BREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DMA_BREADY <= grp_rx_loop_fu_94_m_axi_rx_buffer_V_BREADY;
        else 
            DMA_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DMA_RREADY_assign_proc : process(ap_CS_fsm_state2, grp_tx_loop_fu_105_m_axi_tx_buffer_V_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DMA_RREADY <= grp_tx_loop_fu_105_m_axi_tx_buffer_V_RREADY;
        else 
            DMA_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DMA_WVALID_assign_proc : process(ap_CS_fsm_state2, grp_rx_loop_fu_94_m_axi_rx_buffer_V_WVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DMA_WVALID <= grp_rx_loop_fu_94_m_axi_rx_buffer_V_WVALID;
        else 
            DMA_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_tx_loop_fu_105_ap_ready, ap_sync_grp_tx_loop_fu_105_ap_done, ap_sync_grp_rx_loop_fu_94_ap_ready, ap_sync_grp_rx_loop_fu_94_ap_done)
    begin
                ap_block_state3_on_subcall_done <= (((ap_sync_grp_rx_loop_fu_94_ap_ready and ap_sync_grp_rx_loop_fu_94_ap_done) = ap_const_logic_0) or ((ap_sync_grp_tx_loop_fu_105_ap_ready and ap_sync_grp_tx_loop_fu_105_ap_done) = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(data_tx_V_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (data_tx_V_V_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(data_tx_V_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (data_tx_V_V_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_rx_loop_fu_94_ap_done <= (grp_rx_loop_fu_94_ap_done or ap_sync_reg_grp_rx_loop_fu_94_ap_done);
    ap_sync_grp_rx_loop_fu_94_ap_ready <= (grp_rx_loop_fu_94_ap_ready or ap_sync_reg_grp_rx_loop_fu_94_ap_ready);
    ap_sync_grp_tx_loop_fu_105_ap_done <= (grp_tx_loop_fu_105_ap_done or ap_sync_reg_grp_tx_loop_fu_105_ap_done);
    ap_sync_grp_tx_loop_fu_105_ap_ready <= (grp_tx_loop_fu_105_ap_ready or ap_sync_reg_grp_tx_loop_fu_105_ap_ready);
    data_rx_V_V_0_ack_in <= data_rx_V_V_0_state(1);

    data_rx_V_V_0_ack_out_assign_proc : process(grp_rx_loop_fu_94_axis_V_V_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_rx_V_V_0_ack_out <= grp_rx_loop_fu_94_axis_V_V_TREADY;
        else 
            data_rx_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    data_rx_V_V_0_data_out_assign_proc : process(data_rx_V_V_0_payload_A, data_rx_V_V_0_payload_B, data_rx_V_V_0_sel)
    begin
        if ((data_rx_V_V_0_sel = ap_const_logic_1)) then 
            data_rx_V_V_0_data_out <= data_rx_V_V_0_payload_B;
        else 
            data_rx_V_V_0_data_out <= data_rx_V_V_0_payload_A;
        end if; 
    end process;

    data_rx_V_V_0_load_A <= (not(data_rx_V_V_0_sel_wr) and data_rx_V_V_0_state_cmp_full);
    data_rx_V_V_0_load_B <= (data_rx_V_V_0_state_cmp_full and data_rx_V_V_0_sel_wr);
    data_rx_V_V_0_sel <= data_rx_V_V_0_sel_rd;
    data_rx_V_V_0_state_cmp_full <= '0' when (data_rx_V_V_0_state = ap_const_lv2_1) else '1';
    data_rx_V_V_0_vld_in <= data_rx_V_V_TVALID;
    data_rx_V_V_0_vld_out <= data_rx_V_V_0_state(0);
    data_rx_V_V_TREADY <= data_rx_V_V_0_state(1);
    data_tx_V_V_1_ack_in <= data_tx_V_V_1_state(1);
    data_tx_V_V_1_ack_out <= data_tx_V_V_TREADY;

    data_tx_V_V_1_data_out_assign_proc : process(data_tx_V_V_1_payload_A, data_tx_V_V_1_payload_B, data_tx_V_V_1_sel)
    begin
        if ((data_tx_V_V_1_sel = ap_const_logic_1)) then 
            data_tx_V_V_1_data_out <= data_tx_V_V_1_payload_B;
        else 
            data_tx_V_V_1_data_out <= data_tx_V_V_1_payload_A;
        end if; 
    end process;

    data_tx_V_V_1_load_A <= (not(data_tx_V_V_1_sel_wr) and data_tx_V_V_1_state_cmp_full);
    data_tx_V_V_1_load_B <= (data_tx_V_V_1_state_cmp_full and data_tx_V_V_1_sel_wr);
    data_tx_V_V_1_sel <= data_tx_V_V_1_sel_rd;
    data_tx_V_V_1_state_cmp_full <= '0' when (data_tx_V_V_1_state = ap_const_lv2_1) else '1';
    data_tx_V_V_1_vld_in <= grp_tx_loop_fu_105_axis_V_V_TVALID;
    data_tx_V_V_1_vld_out <= data_tx_V_V_1_state(0);
    data_tx_V_V_TDATA <= data_tx_V_V_1_data_out;
    data_tx_V_V_TVALID <= data_tx_V_V_1_state(0);

    grp_rx_loop_fu_94_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_rx_loop_fu_94_ap_continue <= ap_const_logic_1;
        else 
            grp_rx_loop_fu_94_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_rx_loop_fu_94_ap_start <= grp_rx_loop_fu_94_ap_start_reg;
    grp_rx_loop_fu_94_axis_V_V_TVALID <= data_rx_V_V_0_state(0);

    grp_tx_loop_fu_105_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_tx_loop_fu_105_ap_continue <= ap_const_logic_1;
        else 
            grp_tx_loop_fu_105_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_tx_loop_fu_105_ap_start <= grp_tx_loop_fu_105_ap_start_reg;
    grp_tx_loop_fu_105_axis_V_V_TREADY <= data_tx_V_V_1_state(1);
    r_V_1_fu_186_p1 <= rx_buffer_length_V(9 - 1 downto 0);
    r_V_fu_138_p1 <= tx_buffer_length_V(9 - 1 downto 0);
    rx_final_burst_lengt_fu_216_p3 <= 
        ap_const_lv10_200 when (tmp_i1_fu_190_p2(0) = '1') else 
        tmp_1_i16_cast_fu_206_p1;
    rx_loop_count_V_fu_225_p3 <= 
        tmp_8_i1_fu_196_p4 when (tmp_i1_fu_190_p2(0) = '1') else 
        tmp_4_i1_fu_210_p2;
    tmp_1_i16_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_186_p1),10));
    tmp_1_i_cast_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_138_p1),10));
    tmp_4_i1_fu_210_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(tmp_8_i1_fu_196_p4));
    tmp_4_i_fu_162_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(tmp_8_i_fu_148_p4));
    tmp_8_i1_fu_196_p4 <= rx_buffer_length_V(21 downto 9);
    tmp_8_i_fu_148_p4 <= tx_buffer_length_V(21 downto 9);
    tmp_i1_fu_190_p2 <= "1" when (r_V_1_fu_186_p1 = ap_const_lv9_0) else "0";
    tmp_i_fu_142_p2 <= "1" when (r_V_fu_138_p1 = ap_const_lv9_0) else "0";
    tx_final_burst_lengt_fu_168_p3 <= 
        ap_const_lv10_200 when (tmp_i_fu_142_p2(0) = '1') else 
        tmp_1_i_cast_fu_158_p1;
    tx_loop_count_V_fu_177_p3 <= 
        tmp_8_i_fu_148_p4 when (tmp_i_fu_142_p2(0) = '1') else 
        tmp_4_i_fu_162_p2;
end behav;
