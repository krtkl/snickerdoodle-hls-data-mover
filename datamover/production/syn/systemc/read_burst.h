// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _read_burst_HH_
#define _read_burst_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct read_burst : public sc_module {
    // Port declarations 61
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_tx_buffer_V_AWVALID;
    sc_in< sc_logic > m_axi_tx_buffer_V_AWREADY;
    sc_out< sc_lv<32> > m_axi_tx_buffer_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_tx_buffer_V_AWID;
    sc_out< sc_lv<32> > m_axi_tx_buffer_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_tx_buffer_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_tx_buffer_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_tx_buffer_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_tx_buffer_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_tx_buffer_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_tx_buffer_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_tx_buffer_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_tx_buffer_V_AWUSER;
    sc_out< sc_logic > m_axi_tx_buffer_V_WVALID;
    sc_in< sc_logic > m_axi_tx_buffer_V_WREADY;
    sc_out< sc_lv<64> > m_axi_tx_buffer_V_WDATA;
    sc_out< sc_lv<8> > m_axi_tx_buffer_V_WSTRB;
    sc_out< sc_logic > m_axi_tx_buffer_V_WLAST;
    sc_out< sc_lv<1> > m_axi_tx_buffer_V_WID;
    sc_out< sc_lv<1> > m_axi_tx_buffer_V_WUSER;
    sc_out< sc_logic > m_axi_tx_buffer_V_ARVALID;
    sc_in< sc_logic > m_axi_tx_buffer_V_ARREADY;
    sc_out< sc_lv<32> > m_axi_tx_buffer_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_tx_buffer_V_ARID;
    sc_out< sc_lv<32> > m_axi_tx_buffer_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_tx_buffer_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_tx_buffer_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_tx_buffer_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_tx_buffer_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_tx_buffer_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_tx_buffer_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_tx_buffer_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_tx_buffer_V_ARUSER;
    sc_in< sc_logic > m_axi_tx_buffer_V_RVALID;
    sc_out< sc_logic > m_axi_tx_buffer_V_RREADY;
    sc_in< sc_lv<64> > m_axi_tx_buffer_V_RDATA;
    sc_in< sc_logic > m_axi_tx_buffer_V_RLAST;
    sc_in< sc_lv<1> > m_axi_tx_buffer_V_RID;
    sc_in< sc_lv<1> > m_axi_tx_buffer_V_RUSER;
    sc_in< sc_lv<2> > m_axi_tx_buffer_V_RRESP;
    sc_in< sc_logic > m_axi_tx_buffer_V_BVALID;
    sc_out< sc_logic > m_axi_tx_buffer_V_BREADY;
    sc_in< sc_lv<2> > m_axi_tx_buffer_V_BRESP;
    sc_in< sc_lv<1> > m_axi_tx_buffer_V_BID;
    sc_in< sc_lv<1> > m_axi_tx_buffer_V_BUSER;
    sc_in< sc_lv<29> > tx_buffer_V_offset;
    sc_in< sc_lv<13> > val_assign;
    sc_in< sc_lv<13> > loop_count_V;
    sc_in< sc_lv<13> > final_burst_length_V;
    sc_out< sc_lv<9> > cache_V_address0;
    sc_out< sc_logic > cache_V_ce0;
    sc_out< sc_logic > cache_V_we0;
    sc_out< sc_lv<64> > cache_V_d0;
    sc_out< sc_lv<13> > ap_return;


    // Module declarations
    read_burst(sc_module_name name);
    SC_HAS_PROCESS(read_burst);

    ~read_burst();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > tx_buffer_V_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > tx_buffer_V_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_i_i_reg_236;
    sc_signal< sc_lv<10> > indvar_i_i_reg_120;
    sc_signal< sc_lv<10> > indvar_i_i_reg_120_pp0_iter1_reg;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<12> > tmp_fu_132_p1;
    sc_signal< sc_lv<12> > tmp_reg_210;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<30> > sum_i_fu_152_p2;
    sc_signal< sc_lv<30> > sum_i_reg_215;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_tx_buffer_V_ARREADY;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > exitcond_i_i_fu_168_p2;
    sc_signal< sc_lv<1> > exitcond_i_i_reg_236_pp0_iter1_reg;
    sc_signal< sc_lv<10> > indvar_next_i_i_fu_174_p2;
    sc_signal< sc_lv<10> > indvar_next_i_i_reg_240;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > tx_buffer_V_addr_rea_reg_245;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<10> > ap_phi_mux_indvar_i_i_phi_fu_124_p4;
    sc_signal< sc_lv<64> > indvar1_i_i_fu_180_p1;
    sc_signal< sc_lv<64> > sum_cast_i_fu_158_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_tx_buffer_V_ARREADY;
    sc_signal< sc_lv<21> > buffer_offset_V_fu_136_p3;
    sc_signal< sc_lv<30> > sext_cast_i_fu_148_p1;
    sc_signal< sc_lv<30> > tmp_i_cast_i_fu_144_p1;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<14> > lhs_V_cast_i_i_fu_185_p1;
    sc_signal< sc_lv<14> > tmp_2_cast_i_i_fu_194_p1;
    sc_signal< sc_lv<14> > r_V_fu_188_p2;
    sc_signal< sc_lv<1> > tmp_3_i_i_fu_197_p2;
    sc_signal< sc_lv<13> > data_length_V_write_s_fu_203_p3;
    sc_signal< sc_lv<13> > ap_return_preg;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_pp0_stage0;
    static const sc_lv<10> ap_ST_fsm_state12;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_200;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<14> ap_const_lv14_3FFF;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<13> ap_const_lv13_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_indvar_i_i_phi_fu_124_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sig_ioackin_m_axi_tx_buffer_V_ARREADY();
    void thread_buffer_offset_V_fu_136_p3();
    void thread_cache_V_address0();
    void thread_cache_V_ce0();
    void thread_cache_V_d0();
    void thread_cache_V_we0();
    void thread_data_length_V_write_s_fu_203_p3();
    void thread_exitcond_i_i_fu_168_p2();
    void thread_indvar1_i_i_fu_180_p1();
    void thread_indvar_next_i_i_fu_174_p2();
    void thread_lhs_V_cast_i_i_fu_185_p1();
    void thread_m_axi_tx_buffer_V_ARADDR();
    void thread_m_axi_tx_buffer_V_ARBURST();
    void thread_m_axi_tx_buffer_V_ARCACHE();
    void thread_m_axi_tx_buffer_V_ARID();
    void thread_m_axi_tx_buffer_V_ARLEN();
    void thread_m_axi_tx_buffer_V_ARLOCK();
    void thread_m_axi_tx_buffer_V_ARPROT();
    void thread_m_axi_tx_buffer_V_ARQOS();
    void thread_m_axi_tx_buffer_V_ARREGION();
    void thread_m_axi_tx_buffer_V_ARSIZE();
    void thread_m_axi_tx_buffer_V_ARUSER();
    void thread_m_axi_tx_buffer_V_ARVALID();
    void thread_m_axi_tx_buffer_V_AWADDR();
    void thread_m_axi_tx_buffer_V_AWBURST();
    void thread_m_axi_tx_buffer_V_AWCACHE();
    void thread_m_axi_tx_buffer_V_AWID();
    void thread_m_axi_tx_buffer_V_AWLEN();
    void thread_m_axi_tx_buffer_V_AWLOCK();
    void thread_m_axi_tx_buffer_V_AWPROT();
    void thread_m_axi_tx_buffer_V_AWQOS();
    void thread_m_axi_tx_buffer_V_AWREGION();
    void thread_m_axi_tx_buffer_V_AWSIZE();
    void thread_m_axi_tx_buffer_V_AWUSER();
    void thread_m_axi_tx_buffer_V_AWVALID();
    void thread_m_axi_tx_buffer_V_BREADY();
    void thread_m_axi_tx_buffer_V_RREADY();
    void thread_m_axi_tx_buffer_V_WDATA();
    void thread_m_axi_tx_buffer_V_WID();
    void thread_m_axi_tx_buffer_V_WLAST();
    void thread_m_axi_tx_buffer_V_WSTRB();
    void thread_m_axi_tx_buffer_V_WUSER();
    void thread_m_axi_tx_buffer_V_WVALID();
    void thread_r_V_fu_188_p2();
    void thread_sext_cast_i_fu_148_p1();
    void thread_sum_cast_i_fu_158_p1();
    void thread_sum_i_fu_152_p2();
    void thread_tmp_2_cast_i_i_fu_194_p1();
    void thread_tmp_3_i_i_fu_197_p2();
    void thread_tmp_fu_132_p1();
    void thread_tmp_i_cast_i_fu_144_p1();
    void thread_tx_buffer_V_blk_n_AR();
    void thread_tx_buffer_V_blk_n_R();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
