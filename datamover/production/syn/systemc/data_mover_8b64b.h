// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _data_mover_8b64b_HH_
#define _data_mover_8b64b_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "rx_loop.h"
#include "tx_loop.h"
#include "data_mover_8b64b_control_s_axi.h"
#include "data_mover_8b64b_DMA_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_DMA_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_DMA_ID_WIDTH = 1,
         unsigned int C_M_AXI_DMA_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA_DATA_WIDTH = 64,
         unsigned int C_M_AXI_DMA_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32>
struct data_mover_8b64b : public sc_module {
    // Port declarations 71
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_DMA_AWVALID;
    sc_in< sc_logic > m_axi_DMA_AWREADY;
    sc_out< sc_uint<C_M_AXI_DMA_ADDR_WIDTH> > m_axi_DMA_AWADDR;
    sc_out< sc_uint<C_M_AXI_DMA_ID_WIDTH> > m_axi_DMA_AWID;
    sc_out< sc_lv<8> > m_axi_DMA_AWLEN;
    sc_out< sc_lv<3> > m_axi_DMA_AWSIZE;
    sc_out< sc_lv<2> > m_axi_DMA_AWBURST;
    sc_out< sc_lv<2> > m_axi_DMA_AWLOCK;
    sc_out< sc_lv<4> > m_axi_DMA_AWCACHE;
    sc_out< sc_lv<3> > m_axi_DMA_AWPROT;
    sc_out< sc_lv<4> > m_axi_DMA_AWQOS;
    sc_out< sc_lv<4> > m_axi_DMA_AWREGION;
    sc_out< sc_uint<C_M_AXI_DMA_AWUSER_WIDTH> > m_axi_DMA_AWUSER;
    sc_out< sc_logic > m_axi_DMA_WVALID;
    sc_in< sc_logic > m_axi_DMA_WREADY;
    sc_out< sc_uint<C_M_AXI_DMA_DATA_WIDTH> > m_axi_DMA_WDATA;
    sc_out< sc_uint<C_M_AXI_DMA_DATA_WIDTH/8> > m_axi_DMA_WSTRB;
    sc_out< sc_logic > m_axi_DMA_WLAST;
    sc_out< sc_uint<C_M_AXI_DMA_ID_WIDTH> > m_axi_DMA_WID;
    sc_out< sc_uint<C_M_AXI_DMA_WUSER_WIDTH> > m_axi_DMA_WUSER;
    sc_out< sc_logic > m_axi_DMA_ARVALID;
    sc_in< sc_logic > m_axi_DMA_ARREADY;
    sc_out< sc_uint<C_M_AXI_DMA_ADDR_WIDTH> > m_axi_DMA_ARADDR;
    sc_out< sc_uint<C_M_AXI_DMA_ID_WIDTH> > m_axi_DMA_ARID;
    sc_out< sc_lv<8> > m_axi_DMA_ARLEN;
    sc_out< sc_lv<3> > m_axi_DMA_ARSIZE;
    sc_out< sc_lv<2> > m_axi_DMA_ARBURST;
    sc_out< sc_lv<2> > m_axi_DMA_ARLOCK;
    sc_out< sc_lv<4> > m_axi_DMA_ARCACHE;
    sc_out< sc_lv<3> > m_axi_DMA_ARPROT;
    sc_out< sc_lv<4> > m_axi_DMA_ARQOS;
    sc_out< sc_lv<4> > m_axi_DMA_ARREGION;
    sc_out< sc_uint<C_M_AXI_DMA_ARUSER_WIDTH> > m_axi_DMA_ARUSER;
    sc_in< sc_logic > m_axi_DMA_RVALID;
    sc_out< sc_logic > m_axi_DMA_RREADY;
    sc_in< sc_uint<C_M_AXI_DMA_DATA_WIDTH> > m_axi_DMA_RDATA;
    sc_in< sc_logic > m_axi_DMA_RLAST;
    sc_in< sc_uint<C_M_AXI_DMA_ID_WIDTH> > m_axi_DMA_RID;
    sc_in< sc_uint<C_M_AXI_DMA_RUSER_WIDTH> > m_axi_DMA_RUSER;
    sc_in< sc_lv<2> > m_axi_DMA_RRESP;
    sc_in< sc_logic > m_axi_DMA_BVALID;
    sc_out< sc_logic > m_axi_DMA_BREADY;
    sc_in< sc_lv<2> > m_axi_DMA_BRESP;
    sc_in< sc_uint<C_M_AXI_DMA_ID_WIDTH> > m_axi_DMA_BID;
    sc_in< sc_uint<C_M_AXI_DMA_BUSER_WIDTH> > m_axi_DMA_BUSER;
    sc_in< sc_lv<8> > data_rx_V_V_TDATA;
    sc_in< sc_logic > data_rx_V_V_TVALID;
    sc_out< sc_logic > data_rx_V_V_TREADY;
    sc_out< sc_lv<8> > data_tx_V_V_TDATA;
    sc_out< sc_logic > data_tx_V_V_TVALID;
    sc_in< sc_logic > data_tx_V_V_TREADY;
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<64> > ap_var_for_const2;


    // Module declarations
    data_mover_8b64b(sc_module_name name);
    SC_HAS_PROCESS(data_mover_8b64b);

    ~data_mover_8b64b();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    data_mover_8b64b_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* data_mover_8b64b_control_s_axi_U;
    data_mover_8b64b_DMA_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_DMA_ID_WIDTH,C_M_AXI_DMA_ADDR_WIDTH,C_M_AXI_DMA_DATA_WIDTH,C_M_AXI_DMA_AWUSER_WIDTH,C_M_AXI_DMA_ARUSER_WIDTH,C_M_AXI_DMA_WUSER_WIDTH,C_M_AXI_DMA_RUSER_WIDTH,C_M_AXI_DMA_BUSER_WIDTH,C_M_AXI_DMA_USER_VALUE,C_M_AXI_DMA_PROT_VALUE,C_M_AXI_DMA_CACHE_VALUE>* data_mover_8b64b_DMA_m_axi_U;
    rx_loop* grp_rx_loop_fu_94;
    tx_loop* grp_tx_loop_fu_105;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<8> > data_rx_V_V_0_data_out;
    sc_signal< sc_logic > data_rx_V_V_0_vld_in;
    sc_signal< sc_logic > data_rx_V_V_0_vld_out;
    sc_signal< sc_logic > data_rx_V_V_0_ack_in;
    sc_signal< sc_logic > data_rx_V_V_0_ack_out;
    sc_signal< sc_lv<8> > data_rx_V_V_0_payload_A;
    sc_signal< sc_lv<8> > data_rx_V_V_0_payload_B;
    sc_signal< sc_logic > data_rx_V_V_0_sel_rd;
    sc_signal< sc_logic > data_rx_V_V_0_sel_wr;
    sc_signal< sc_logic > data_rx_V_V_0_sel;
    sc_signal< sc_logic > data_rx_V_V_0_load_A;
    sc_signal< sc_logic > data_rx_V_V_0_load_B;
    sc_signal< sc_lv<2> > data_rx_V_V_0_state;
    sc_signal< sc_logic > data_rx_V_V_0_state_cmp_full;
    sc_signal< sc_lv<8> > data_tx_V_V_1_data_out;
    sc_signal< sc_logic > data_tx_V_V_1_vld_in;
    sc_signal< sc_logic > data_tx_V_V_1_vld_out;
    sc_signal< sc_logic > data_tx_V_V_1_ack_in;
    sc_signal< sc_logic > data_tx_V_V_1_ack_out;
    sc_signal< sc_lv<8> > data_tx_V_V_1_payload_A;
    sc_signal< sc_lv<8> > data_tx_V_V_1_payload_B;
    sc_signal< sc_logic > data_tx_V_V_1_sel_rd;
    sc_signal< sc_logic > data_tx_V_V_1_sel_wr;
    sc_signal< sc_logic > data_tx_V_V_1_sel;
    sc_signal< sc_logic > data_tx_V_V_1_load_A;
    sc_signal< sc_logic > data_tx_V_V_1_load_B;
    sc_signal< sc_lv<2> > data_tx_V_V_1_state;
    sc_signal< sc_logic > data_tx_V_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > tx_buffer_V;
    sc_signal< sc_lv<25> > tx_buffer_length_V;
    sc_signal< sc_lv<32> > rx_buffer_V;
    sc_signal< sc_lv<25> > rx_buffer_length_V;
    sc_signal< sc_logic > DMA_AWVALID;
    sc_signal< sc_logic > DMA_AWREADY;
    sc_signal< sc_logic > DMA_WVALID;
    sc_signal< sc_logic > DMA_WREADY;
    sc_signal< sc_logic > DMA_ARVALID;
    sc_signal< sc_logic > DMA_ARREADY;
    sc_signal< sc_logic > DMA_RVALID;
    sc_signal< sc_logic > DMA_RREADY;
    sc_signal< sc_lv<64> > DMA_RDATA;
    sc_signal< sc_logic > DMA_RLAST;
    sc_signal< sc_lv<1> > DMA_RID;
    sc_signal< sc_lv<1> > DMA_RUSER;
    sc_signal< sc_lv<2> > DMA_RRESP;
    sc_signal< sc_logic > DMA_BVALID;
    sc_signal< sc_logic > DMA_BREADY;
    sc_signal< sc_lv<2> > DMA_BRESP;
    sc_signal< sc_lv<1> > DMA_BID;
    sc_signal< sc_lv<1> > DMA_BUSER;
    sc_signal< sc_lv<29> > rx_buffer_V3_reg_234;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<29> > tx_buffer_V1_reg_239;
    sc_signal< sc_lv<13> > tx_final_burst_lengt_fu_168_p3;
    sc_signal< sc_lv<13> > tx_final_burst_lengt_reg_244;
    sc_signal< sc_lv<13> > tx_loop_count_V_fu_177_p3;
    sc_signal< sc_lv<13> > tx_loop_count_V_reg_249;
    sc_signal< sc_lv<13> > rx_final_burst_lengt_fu_216_p3;
    sc_signal< sc_lv<13> > rx_final_burst_lengt_reg_254;
    sc_signal< sc_lv<13> > rx_loop_count_V_fu_225_p3;
    sc_signal< sc_lv<13> > rx_loop_count_V_reg_259;
    sc_signal< sc_logic > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWVALID;
    sc_signal< sc_lv<32> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWADDR;
    sc_signal< sc_lv<1> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWID;
    sc_signal< sc_lv<32> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWLEN;
    sc_signal< sc_lv<3> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWSIZE;
    sc_signal< sc_lv<2> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWBURST;
    sc_signal< sc_lv<2> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWLOCK;
    sc_signal< sc_lv<4> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWCACHE;
    sc_signal< sc_lv<3> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWPROT;
    sc_signal< sc_lv<4> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWQOS;
    sc_signal< sc_lv<4> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWREGION;
    sc_signal< sc_lv<1> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_AWUSER;
    sc_signal< sc_logic > grp_rx_loop_fu_94_m_axi_rx_buffer_V_WVALID;
    sc_signal< sc_lv<64> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_WDATA;
    sc_signal< sc_lv<8> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_WSTRB;
    sc_signal< sc_logic > grp_rx_loop_fu_94_m_axi_rx_buffer_V_WLAST;
    sc_signal< sc_lv<1> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_WID;
    sc_signal< sc_lv<1> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_WUSER;
    sc_signal< sc_logic > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARVALID;
    sc_signal< sc_lv<32> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARADDR;
    sc_signal< sc_lv<1> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARID;
    sc_signal< sc_lv<32> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARLEN;
    sc_signal< sc_lv<3> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARSIZE;
    sc_signal< sc_lv<2> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARBURST;
    sc_signal< sc_lv<2> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARLOCK;
    sc_signal< sc_lv<4> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARCACHE;
    sc_signal< sc_lv<3> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARPROT;
    sc_signal< sc_lv<4> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARQOS;
    sc_signal< sc_lv<4> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARREGION;
    sc_signal< sc_lv<1> > grp_rx_loop_fu_94_m_axi_rx_buffer_V_ARUSER;
    sc_signal< sc_logic > grp_rx_loop_fu_94_m_axi_rx_buffer_V_RREADY;
    sc_signal< sc_logic > grp_rx_loop_fu_94_m_axi_rx_buffer_V_BREADY;
    sc_signal< sc_logic > grp_rx_loop_fu_94_axis_V_V_TVALID;
    sc_signal< sc_logic > grp_rx_loop_fu_94_axis_V_V_TREADY;
    sc_signal< sc_logic > grp_rx_loop_fu_94_ap_done;
    sc_signal< sc_logic > grp_rx_loop_fu_94_ap_start;
    sc_signal< sc_logic > grp_rx_loop_fu_94_ap_ready;
    sc_signal< sc_logic > grp_rx_loop_fu_94_ap_idle;
    sc_signal< sc_logic > grp_rx_loop_fu_94_ap_continue;
    sc_signal< sc_lv<8> > grp_tx_loop_fu_105_axis_V_V_TDATA;
    sc_signal< sc_logic > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWVALID;
    sc_signal< sc_lv<32> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWADDR;
    sc_signal< sc_lv<1> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWID;
    sc_signal< sc_lv<32> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWLEN;
    sc_signal< sc_lv<3> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWSIZE;
    sc_signal< sc_lv<2> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWBURST;
    sc_signal< sc_lv<2> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWLOCK;
    sc_signal< sc_lv<4> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWCACHE;
    sc_signal< sc_lv<3> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWPROT;
    sc_signal< sc_lv<4> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWQOS;
    sc_signal< sc_lv<4> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWREGION;
    sc_signal< sc_lv<1> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_AWUSER;
    sc_signal< sc_logic > grp_tx_loop_fu_105_m_axi_tx_buffer_V_WVALID;
    sc_signal< sc_lv<64> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_WDATA;
    sc_signal< sc_lv<8> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_WSTRB;
    sc_signal< sc_logic > grp_tx_loop_fu_105_m_axi_tx_buffer_V_WLAST;
    sc_signal< sc_lv<1> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_WID;
    sc_signal< sc_lv<1> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_WUSER;
    sc_signal< sc_logic > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARVALID;
    sc_signal< sc_lv<32> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARADDR;
    sc_signal< sc_lv<1> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARID;
    sc_signal< sc_lv<32> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARLEN;
    sc_signal< sc_lv<3> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARSIZE;
    sc_signal< sc_lv<2> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARBURST;
    sc_signal< sc_lv<2> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARLOCK;
    sc_signal< sc_lv<4> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARCACHE;
    sc_signal< sc_lv<3> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARPROT;
    sc_signal< sc_lv<4> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARQOS;
    sc_signal< sc_lv<4> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARREGION;
    sc_signal< sc_lv<1> > grp_tx_loop_fu_105_m_axi_tx_buffer_V_ARUSER;
    sc_signal< sc_logic > grp_tx_loop_fu_105_m_axi_tx_buffer_V_RREADY;
    sc_signal< sc_logic > grp_tx_loop_fu_105_m_axi_tx_buffer_V_BREADY;
    sc_signal< sc_logic > grp_tx_loop_fu_105_axis_V_V_TVALID;
    sc_signal< sc_logic > grp_tx_loop_fu_105_axis_V_V_TREADY;
    sc_signal< sc_logic > grp_tx_loop_fu_105_ap_done;
    sc_signal< sc_logic > grp_tx_loop_fu_105_ap_start;
    sc_signal< sc_logic > grp_tx_loop_fu_105_ap_ready;
    sc_signal< sc_logic > grp_tx_loop_fu_105_ap_idle;
    sc_signal< sc_logic > grp_tx_loop_fu_105_ap_continue;
    sc_signal< sc_logic > grp_rx_loop_fu_94_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_sync_grp_tx_loop_fu_105_ap_ready;
    sc_signal< sc_logic > ap_sync_grp_tx_loop_fu_105_ap_done;
    sc_signal< sc_logic > ap_sync_grp_rx_loop_fu_94_ap_ready;
    sc_signal< sc_logic > ap_sync_grp_rx_loop_fu_94_ap_done;
    sc_signal< bool > ap_block_state3_on_subcall_done;
    sc_signal< sc_logic > ap_sync_reg_grp_rx_loop_fu_94_ap_ready;
    sc_signal< sc_logic > ap_sync_reg_grp_rx_loop_fu_94_ap_done;
    sc_signal< sc_logic > grp_tx_loop_fu_105_ap_start_reg;
    sc_signal< sc_logic > ap_sync_reg_grp_tx_loop_fu_105_ap_ready;
    sc_signal< sc_logic > ap_sync_reg_grp_tx_loop_fu_105_ap_done;
    sc_signal< sc_lv<12> > r_V_fu_138_p1;
    sc_signal< sc_lv<13> > tmp_4_i_fu_148_p4;
    sc_signal< sc_lv<1> > tmp_i_fu_142_p2;
    sc_signal< sc_lv<13> > tmp_6_i_cast_fu_158_p1;
    sc_signal< sc_lv<13> > tmp_9_i_fu_162_p2;
    sc_signal< sc_lv<12> > r_V_1_fu_186_p1;
    sc_signal< sc_lv<13> > tmp_4_i1_fu_196_p4;
    sc_signal< sc_lv<1> > tmp_i1_fu_190_p2;
    sc_signal< sc_lv<13> > tmp_6_i16_cast_fu_206_p1;
    sc_signal< sc_lv<13> > tmp_9_i1_fu_210_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_DMA_USER_VALUE;
    static const int C_M_AXI_DMA_PROT_VALUE;
    static const int C_M_AXI_DMA_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<64> ap_const_lv64_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_DMA_ARVALID();
    void thread_DMA_AWVALID();
    void thread_DMA_BREADY();
    void thread_DMA_RREADY();
    void thread_DMA_WVALID();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state3_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_grp_rx_loop_fu_94_ap_done();
    void thread_ap_sync_grp_rx_loop_fu_94_ap_ready();
    void thread_ap_sync_grp_tx_loop_fu_105_ap_done();
    void thread_ap_sync_grp_tx_loop_fu_105_ap_ready();
    void thread_data_rx_V_V_0_ack_in();
    void thread_data_rx_V_V_0_ack_out();
    void thread_data_rx_V_V_0_data_out();
    void thread_data_rx_V_V_0_load_A();
    void thread_data_rx_V_V_0_load_B();
    void thread_data_rx_V_V_0_sel();
    void thread_data_rx_V_V_0_state_cmp_full();
    void thread_data_rx_V_V_0_vld_in();
    void thread_data_rx_V_V_0_vld_out();
    void thread_data_rx_V_V_TREADY();
    void thread_data_tx_V_V_1_ack_in();
    void thread_data_tx_V_V_1_ack_out();
    void thread_data_tx_V_V_1_data_out();
    void thread_data_tx_V_V_1_load_A();
    void thread_data_tx_V_V_1_load_B();
    void thread_data_tx_V_V_1_sel();
    void thread_data_tx_V_V_1_state_cmp_full();
    void thread_data_tx_V_V_1_vld_in();
    void thread_data_tx_V_V_1_vld_out();
    void thread_data_tx_V_V_TDATA();
    void thread_data_tx_V_V_TVALID();
    void thread_grp_rx_loop_fu_94_ap_continue();
    void thread_grp_rx_loop_fu_94_ap_start();
    void thread_grp_rx_loop_fu_94_axis_V_V_TVALID();
    void thread_grp_tx_loop_fu_105_ap_continue();
    void thread_grp_tx_loop_fu_105_ap_start();
    void thread_grp_tx_loop_fu_105_axis_V_V_TREADY();
    void thread_r_V_1_fu_186_p1();
    void thread_r_V_fu_138_p1();
    void thread_rx_final_burst_lengt_fu_216_p3();
    void thread_rx_loop_count_V_fu_225_p3();
    void thread_tmp_4_i1_fu_196_p4();
    void thread_tmp_4_i_fu_148_p4();
    void thread_tmp_6_i16_cast_fu_206_p1();
    void thread_tmp_6_i_cast_fu_158_p1();
    void thread_tmp_9_i1_fu_210_p2();
    void thread_tmp_9_i_fu_162_p2();
    void thread_tmp_i1_fu_190_p2();
    void thread_tmp_i_fu_142_p2();
    void thread_tx_final_burst_lengt_fu_168_p3();
    void thread_tx_loop_count_V_fu_177_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
