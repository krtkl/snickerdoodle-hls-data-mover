// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rx_axis_words25.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rx_axis_words25::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rx_axis_words25::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> rx_axis_words25::ap_ST_fsm_state1 = "1";
const sc_lv<4> rx_axis_words25::ap_ST_fsm_state2 = "10";
const sc_lv<4> rx_axis_words25::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> rx_axis_words25::ap_ST_fsm_state5 = "1000";
const sc_lv<32> rx_axis_words25::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool rx_axis_words25::ap_const_boolean_1 = true;
const sc_lv<32> rx_axis_words25::ap_const_lv32_2 = "10";
const bool rx_axis_words25::ap_const_boolean_0 = false;
const sc_lv<1> rx_axis_words25::ap_const_lv1_0 = "0";
const sc_lv<32> rx_axis_words25::ap_const_lv32_1 = "1";
const sc_lv<1> rx_axis_words25::ap_const_lv1_1 = "1";
const sc_lv<10> rx_axis_words25::ap_const_lv10_0 = "0000000000";
const sc_lv<64> rx_axis_words25::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<14> rx_axis_words25::ap_const_lv14_3FFF = "11111111111111";
const sc_lv<10> rx_axis_words25::ap_const_lv10_200 = "1000000000";
const sc_lv<10> rx_axis_words25::ap_const_lv10_1 = "1";
const sc_lv<10> rx_axis_words25::ap_const_lv10_3FF = "1111111111";
const sc_lv<9> rx_axis_words25::ap_const_lv9_0 = "000000000";
const sc_lv<32> rx_axis_words25::ap_const_lv32_3 = "11";

rx_axis_words25::rx_axis_words25(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( axis_V_V_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op33_read_state3 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( axis_V_V_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op33_read_state3 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);
    sensitive << ( axis_V_V_TVALID );
    sensitive << ( ap_predicate_op33_read_state3 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_99);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond1_i_i_i_fu_196_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_i_i_i_phi_fu_140_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( i_i_i_i_reg_136 );
    sensitive << ( exitcond1_i_i_i_reg_257 );
    sensitive << ( i_reg_261 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148);

    SC_METHOD(thread_ap_predicate_op33_read_state3);
    sensitive << ( exitcond1_i_i_i_fu_196_p2 );
    sensitive << ( tmp_3_i_i_i_fu_211_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_reg_247 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_axis_V_V_TDATA_blk_n);
    sensitive << ( axis_V_V_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond1_i_i_i_fu_196_p2 );
    sensitive << ( tmp_3_i_i_i_fu_211_p2 );

    SC_METHOD(thread_axis_V_V_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op33_read_state3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_cache_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_5_i_i_i_fu_228_p1 );

    SC_METHOD(thread_cache_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_cache_V_d0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 );

    SC_METHOD(thread_cache_V_we0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( exitcond1_i_i_i_reg_257 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_data_length_V_1_i_i_s_fu_217_p2);
    sensitive << ( p_092_1_i_i_i_fu_82 );

    SC_METHOD(thread_exitcond1_i_i_i_fu_196_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_i_i_i_phi_fu_140_p4 );

    SC_METHOD(thread_final_burst_length_V_4_fu_184_p3);
    sensitive << ( final_burst_length_V );
    sensitive << ( tmp_i_i_i_reg_252 );

    SC_METHOD(thread_i_fu_202_p2);
    sensitive << ( ap_phi_mux_i_i_i_i_phi_fu_140_p4 );

    SC_METHOD(thread_lhs_V_cast_i_i_i_fu_164_p1);
    sensitive << ( loop_count_V );

    SC_METHOD(thread_r_V_fu_168_p2);
    sensitive << ( lhs_V_cast_i_i_i_fu_164_p1 );

    SC_METHOD(thread_rx_buffer_V_offset_out_blk_n);
    sensitive << ( rx_buffer_V_offset_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_rx_buffer_V_offset_out_din);
    sensitive << ( rx_buffer_V_offset );
    sensitive << ( rx_buffer_V_offset_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_rx_buffer_V_offset_out_write);
    sensitive << ( rx_buffer_V_offset_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_3_i_i_i_fu_211_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_i_i_i_fu_196_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( p_092_1_i_i_i_fu_82 );

    SC_METHOD(thread_tmp_5_i_i_i_fu_228_p1);
    sensitive << ( i_i_i_i_reg_136 );

    SC_METHOD(thread_tmp_cast_i_i_i_fu_174_p1);
    sensitive << ( tmp_fu_160_p1 );

    SC_METHOD(thread_tmp_fu_160_p1);
    sensitive << ( val_assign );

    SC_METHOD(thread_tmp_i_i_i_fu_178_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_cast_i_i_i_fu_174_p1 );
    sensitive << ( r_V_fu_168_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rx_buffer_V_offset_out_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_i_i_i_fu_196_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rx_axis_words25_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, axis_V_V_TDATA, "(port)axis_V_V_TDATA");
    sc_trace(mVcdFile, axis_V_V_TVALID, "(port)axis_V_V_TVALID");
    sc_trace(mVcdFile, axis_V_V_TREADY, "(port)axis_V_V_TREADY");
    sc_trace(mVcdFile, loop_count_V, "(port)loop_count_V");
    sc_trace(mVcdFile, final_burst_length_V, "(port)final_burst_length_V");
    sc_trace(mVcdFile, val_assign, "(port)val_assign");
    sc_trace(mVcdFile, cache_V_address0, "(port)cache_V_address0");
    sc_trace(mVcdFile, cache_V_ce0, "(port)cache_V_ce0");
    sc_trace(mVcdFile, cache_V_we0, "(port)cache_V_we0");
    sc_trace(mVcdFile, cache_V_d0, "(port)cache_V_d0");
    sc_trace(mVcdFile, rx_buffer_V_offset, "(port)rx_buffer_V_offset");
    sc_trace(mVcdFile, rx_buffer_V_offset_out_din, "(port)rx_buffer_V_offset_out_din");
    sc_trace(mVcdFile, rx_buffer_V_offset_out_full_n, "(port)rx_buffer_V_offset_out_full_n");
    sc_trace(mVcdFile, rx_buffer_V_offset_out_write, "(port)rx_buffer_V_offset_out_write");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, axis_V_V_TDATA_blk_n, "axis_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond1_i_i_i_fu_196_p2, "exitcond1_i_i_i_fu_196_p2");
    sc_trace(mVcdFile, tmp_3_i_i_i_fu_211_p2, "tmp_3_i_i_i_fu_211_p2");
    sc_trace(mVcdFile, rx_buffer_V_offset_out_blk_n, "rx_buffer_V_offset_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_i_i_i_reg_136, "i_i_i_i_reg_136");
    sc_trace(mVcdFile, tmp_fu_160_p1, "tmp_fu_160_p1");
    sc_trace(mVcdFile, tmp_reg_247, "tmp_reg_247");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_i_i_i_fu_178_p2, "tmp_i_i_i_fu_178_p2");
    sc_trace(mVcdFile, tmp_i_i_i_reg_252, "tmp_i_i_i_reg_252");
    sc_trace(mVcdFile, exitcond1_i_i_i_reg_257, "exitcond1_i_i_i_reg_257");
    sc_trace(mVcdFile, ap_predicate_op33_read_state3, "ap_predicate_op33_read_state3");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_202_p2, "i_fu_202_p2");
    sc_trace(mVcdFile, i_reg_261, "i_reg_261");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_phi_mux_i_i_i_i_phi_fu_140_p4, "ap_phi_mux_i_i_i_i_phi_fu_140_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148, "ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148, "ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148");
    sc_trace(mVcdFile, tmp_5_i_i_i_fu_228_p1, "tmp_5_i_i_i_fu_228_p1");
    sc_trace(mVcdFile, p_092_1_i_i_i_fu_82, "p_092_1_i_i_i_fu_82");
    sc_trace(mVcdFile, final_burst_length_V_4_fu_184_p3, "final_burst_length_V_4_fu_184_p3");
    sc_trace(mVcdFile, data_length_V_1_i_i_s_fu_217_p2, "data_length_V_1_i_i_s_fu_217_p2");
    sc_trace(mVcdFile, lhs_V_cast_i_i_i_fu_164_p1, "lhs_V_cast_i_i_i_fu_164_p1");
    sc_trace(mVcdFile, tmp_cast_i_i_i_fu_174_p1, "tmp_cast_i_i_i_fu_174_p1");
    sc_trace(mVcdFile, r_V_fu_168_p2, "r_V_fu_168_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_99, "ap_condition_99");
#endif

    }
}

rx_axis_words25::~rx_axis_words25() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void rx_axis_words25::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(rx_buffer_V_offset_out_full_n.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(rx_buffer_V_offset_out_full_n.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_99.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(exitcond1_i_i_i_fu_196_p2.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_i_i_i_fu_211_p2.read()))) {
            ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 = axis_V_V_TDATA.read();
        } else if ((esl_seteq<1,1,1>(exitcond1_i_i_i_fu_196_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(tmp_3_i_i_i_fu_211_p2.read(), ap_const_lv1_1))) {
            ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 = ap_const_lv64_0;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 = ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148.read();
        }
    }
    if ((esl_seteq<1,1,1>(rx_buffer_V_offset_out_full_n.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_i_i_i_reg_136 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_i_reg_257.read()))) {
        i_i_i_i_reg_136 = i_reg_261.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_092_1_i_i_i_fu_82 = data_length_V_1_i_i_s_fu_217_p2.read();
    } else if ((esl_seteq<1,1,1>(rx_buffer_V_offset_out_full_n.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_092_1_i_i_i_fu_82 = final_burst_length_V_4_fu_184_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond1_i_i_i_reg_257 = exitcond1_i_i_i_fu_196_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_261 = i_fu_202_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        tmp_i_i_i_reg_252 = tmp_i_i_i_fu_178_p2.read();
        tmp_reg_247 = tmp_fu_160_p1.read();
    }
}

void rx_axis_words25::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void rx_axis_words25::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void rx_axis_words25::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void rx_axis_words25::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void rx_axis_words25::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rx_axis_words25::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_0, axis_V_V_TVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state3.read()));
}

void rx_axis_words25::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_0, axis_V_V_TVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state3.read()));
}

void rx_axis_words25::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void rx_axis_words25::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, axis_V_V_TVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state3.read()));
}

void rx_axis_words25::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rx_axis_words25::thread_ap_condition_99() {
    ap_condition_99 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void rx_axis_words25::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(exitcond1_i_i_i_fu_196_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void rx_axis_words25::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void rx_axis_words25::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void rx_axis_words25::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rx_axis_words25::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void rx_axis_words25::thread_ap_phi_mux_i_i_i_i_phi_fu_140_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_i_reg_257.read()))) {
        ap_phi_mux_i_i_i_i_phi_fu_140_p4 = i_reg_261.read();
    } else {
        ap_phi_mux_i_i_i_i_phi_fu_140_p4 = i_i_i_i_reg_136.read();
    }
}

void rx_axis_words25::thread_ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148() {
    ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
}

void rx_axis_words25::thread_ap_predicate_op33_read_state3() {
    ap_predicate_op33_read_state3 = (esl_seteq<1,1,1>(exitcond1_i_i_i_fu_196_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_i_i_i_fu_211_p2.read()));
}

void rx_axis_words25::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rx_axis_words25::thread_ap_return() {
    ap_return = esl_concat<12,9>(tmp_reg_247.read(), ap_const_lv9_0);
}

void rx_axis_words25::thread_axis_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond1_i_i_i_fu_196_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_i_i_i_fu_211_p2.read()))) {
        axis_V_V_TDATA_blk_n = axis_V_V_TVALID.read();
    } else {
        axis_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void rx_axis_words25::thread_axis_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_read_state3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        axis_V_V_TREADY = ap_const_logic_1;
    } else {
        axis_V_V_TREADY = ap_const_logic_0;
    }
}

void rx_axis_words25::thread_cache_V_address0() {
    cache_V_address0 =  (sc_lv<9>) (tmp_5_i_i_i_fu_228_p1.read());
}

void rx_axis_words25::thread_cache_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        cache_V_ce0 = ap_const_logic_1;
    } else {
        cache_V_ce0 = ap_const_logic_0;
    }
}

void rx_axis_words25::thread_cache_V_d0() {
    cache_V_d0 = ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148.read();
}

void rx_axis_words25::thread_cache_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_i_reg_257.read()))) {
        cache_V_we0 = ap_const_logic_1;
    } else {
        cache_V_we0 = ap_const_logic_0;
    }
}

void rx_axis_words25::thread_data_length_V_1_i_i_s_fu_217_p2() {
    data_length_V_1_i_i_s_fu_217_p2 = (!p_092_1_i_i_i_fu_82.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<10>(): (sc_biguint<10>(p_092_1_i_i_i_fu_82.read()) + sc_bigint<10>(ap_const_lv10_3FF));
}

void rx_axis_words25::thread_exitcond1_i_i_i_fu_196_p2() {
    exitcond1_i_i_i_fu_196_p2 = (!ap_phi_mux_i_i_i_i_phi_fu_140_p4.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_i_i_i_phi_fu_140_p4.read() == ap_const_lv10_200);
}

void rx_axis_words25::thread_final_burst_length_V_4_fu_184_p3() {
    final_burst_length_V_4_fu_184_p3 = (!tmp_i_i_i_reg_252.read()[0].is_01())? sc_lv<10>(): ((tmp_i_i_i_reg_252.read()[0].to_bool())? final_burst_length_V.read(): ap_const_lv10_200);
}

void rx_axis_words25::thread_i_fu_202_p2() {
    i_fu_202_p2 = (!ap_phi_mux_i_i_i_i_phi_fu_140_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_i_i_i_i_phi_fu_140_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void rx_axis_words25::thread_lhs_V_cast_i_i_i_fu_164_p1() {
    lhs_V_cast_i_i_i_fu_164_p1 = esl_zext<14,13>(loop_count_V.read());
}

void rx_axis_words25::thread_r_V_fu_168_p2() {
    r_V_fu_168_p2 = (!ap_const_lv14_3FFF.is_01() || !lhs_V_cast_i_i_i_fu_164_p1.read().is_01())? sc_lv<14>(): (sc_bigint<14>(ap_const_lv14_3FFF) + sc_biguint<14>(lhs_V_cast_i_i_i_fu_164_p1.read()));
}

void rx_axis_words25::thread_rx_buffer_V_offset_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rx_buffer_V_offset_out_blk_n = rx_buffer_V_offset_out_full_n.read();
    } else {
        rx_buffer_V_offset_out_blk_n = ap_const_logic_1;
    }
}

void rx_axis_words25::thread_rx_buffer_V_offset_out_din() {
    rx_buffer_V_offset_out_din = rx_buffer_V_offset.read();
}

void rx_axis_words25::thread_rx_buffer_V_offset_out_write() {
    if ((esl_seteq<1,1,1>(rx_buffer_V_offset_out_full_n.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        rx_buffer_V_offset_out_write = ap_const_logic_1;
    } else {
        rx_buffer_V_offset_out_write = ap_const_logic_0;
    }
}

void rx_axis_words25::thread_tmp_3_i_i_i_fu_211_p2() {
    tmp_3_i_i_i_fu_211_p2 = (!p_092_1_i_i_i_fu_82.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(p_092_1_i_i_i_fu_82.read() == ap_const_lv10_0);
}

void rx_axis_words25::thread_tmp_5_i_i_i_fu_228_p1() {
    tmp_5_i_i_i_fu_228_p1 = esl_zext<64,10>(i_i_i_i_reg_136.read());
}

void rx_axis_words25::thread_tmp_cast_i_i_i_fu_174_p1() {
    tmp_cast_i_i_i_fu_174_p1 = esl_zext<14,12>(tmp_fu_160_p1.read());
}

void rx_axis_words25::thread_tmp_fu_160_p1() {
    tmp_fu_160_p1 = val_assign.read().range(12-1, 0);
}

void rx_axis_words25::thread_tmp_i_i_i_fu_178_p2() {
    tmp_i_i_i_fu_178_p2 = (!tmp_cast_i_i_i_fu_174_p1.read().is_01() || !r_V_fu_168_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_cast_i_i_i_fu_174_p1.read() == r_V_fu_168_p2.read());
}

void rx_axis_words25::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(rx_buffer_V_offset_out_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(exitcond1_i_i_i_fu_196_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(exitcond1_i_i_i_fu_196_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

