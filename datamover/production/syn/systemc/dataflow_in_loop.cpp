// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dataflow_in_loop.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dataflow_in_loop::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dataflow_in_loop::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<64> dataflow_in_loop::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> dataflow_in_loop::ap_const_lv64_1 = "1";
const sc_lv<1> dataflow_in_loop::ap_const_lv1_0 = "0";
const sc_lv<1> dataflow_in_loop::ap_const_lv1_1 = "1";
const sc_lv<2> dataflow_in_loop::ap_const_lv2_0 = "00";
const sc_lv<2> dataflow_in_loop::ap_const_lv2_1 = "1";
const sc_lv<32> dataflow_in_loop::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<3> dataflow_in_loop::ap_const_lv3_0 = "000";
const sc_lv<4> dataflow_in_loop::ap_const_lv4_0 = "0000";
const bool dataflow_in_loop::ap_const_boolean_1 = true;

dataflow_in_loop::dataflow_in_loop(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cache_V_U = new dataflow_in_loop_cud("cache_V_U");
    cache_V_U->clk(ap_clk);
    cache_V_U->reset(ap_rst);
    cache_V_U->i_address0(rx_axis_words7131_U0_cache_V1_address0);
    cache_V_U->i_ce0(rx_axis_words7131_U0_cache_V1_ce0);
    cache_V_U->i_we0(rx_axis_words7131_U0_cache_V1_we0);
    cache_V_U->i_d0(rx_axis_words7131_U0_cache_V1_d0);
    cache_V_U->i_q0(cache_V_i_q0);
    cache_V_U->t_address0(write_burst_U0_cache_V_address0);
    cache_V_U->t_ce0(write_burst_U0_cache_V_ce0);
    cache_V_U->t_we0(ap_var_for_const0);
    cache_V_U->t_d0(ap_var_for_const1);
    cache_V_U->t_q0(cache_V_t_q0);
    cache_V_U->i_ce(ap_var_for_const2);
    cache_V_U->t_ce(ap_var_for_const2);
    cache_V_U->i_full_n(cache_V_i_full_n);
    cache_V_U->i_write(ap_channel_done_cache_V);
    cache_V_U->t_empty_n(cache_V_t_empty_n);
    cache_V_U->t_read(write_burst_U0_ap_ready);
    rx_axis_words7131_U0 = new rx_axis_words7131("rx_axis_words7131_U0");
    rx_axis_words7131_U0->ap_clk(ap_clk);
    rx_axis_words7131_U0->ap_rst(ap_rst);
    rx_axis_words7131_U0->ap_start(rx_axis_words7131_U0_ap_start);
    rx_axis_words7131_U0->ap_done(rx_axis_words7131_U0_ap_done);
    rx_axis_words7131_U0->ap_continue(rx_axis_words7131_U0_ap_continue);
    rx_axis_words7131_U0->ap_idle(rx_axis_words7131_U0_ap_idle);
    rx_axis_words7131_U0->ap_ready(rx_axis_words7131_U0_ap_ready);
    rx_axis_words7131_U0->axis_V_V_TDATA(axis_V_V_TDATA);
    rx_axis_words7131_U0->axis_V_V_TVALID(axis_V_V_TVALID);
    rx_axis_words7131_U0->axis_V_V_TREADY(rx_axis_words7131_U0_axis_V_V_TREADY);
    rx_axis_words7131_U0->loop_count_V(loop_count_V);
    rx_axis_words7131_U0->final_burst_length_V(final_burst_length_V);
    rx_axis_words7131_U0->val_assign(val_assign);
    rx_axis_words7131_U0->cache_V1_address0(rx_axis_words7131_U0_cache_V1_address0);
    rx_axis_words7131_U0->cache_V1_ce0(rx_axis_words7131_U0_cache_V1_ce0);
    rx_axis_words7131_U0->cache_V1_we0(rx_axis_words7131_U0_cache_V1_we0);
    rx_axis_words7131_U0->cache_V1_d0(rx_axis_words7131_U0_cache_V1_d0);
    rx_axis_words7131_U0->rx_buffer_V_offset(rx_buffer_V_offset1);
    rx_axis_words7131_U0->rx_buffer_V_offset_out_din(rx_axis_words7131_U0_rx_buffer_V_offset_out_din);
    rx_axis_words7131_U0->rx_buffer_V_offset_out_full_n(rx_buffer_V_offset_c_full_n);
    rx_axis_words7131_U0->rx_buffer_V_offset_out_write(rx_axis_words7131_U0_rx_buffer_V_offset_out_write);
    rx_axis_words7131_U0->rx_buffer_V_offset1(rx_buffer_V_offset);
    rx_axis_words7131_U0->rx_buffer_V_offset1_out_din(rx_axis_words7131_U0_rx_buffer_V_offset1_out_din);
    rx_axis_words7131_U0->rx_buffer_V_offset1_out_full_n(rx_buffer_V_offset_c_2_full_n);
    rx_axis_words7131_U0->rx_buffer_V_offset1_out_write(rx_axis_words7131_U0_rx_buffer_V_offset1_out_write);
    rx_axis_words7131_U0->ap_return(rx_axis_words7131_U0_ap_return);
    write_burst_U0 = new write_burst("write_burst_U0");
    write_burst_U0->ap_clk(ap_clk);
    write_burst_U0->ap_rst(ap_rst);
    write_burst_U0->ap_start(write_burst_U0_ap_start);
    write_burst_U0->ap_done(write_burst_U0_ap_done);
    write_burst_U0->ap_continue(write_burst_U0_ap_continue);
    write_burst_U0->ap_idle(write_burst_U0_ap_idle);
    write_burst_U0->ap_ready(write_burst_U0_ap_ready);
    write_burst_U0->cache_V_address0(write_burst_U0_cache_V_address0);
    write_burst_U0->cache_V_ce0(write_burst_U0_cache_V_ce0);
    write_burst_U0->cache_V_q0(cache_V_t_q0);
    write_burst_U0->buffer_offset_V(buffer_offset_V_dout);
    write_burst_U0->m_axi_rx_buffer_V_AWVALID(write_burst_U0_m_axi_rx_buffer_V_AWVALID);
    write_burst_U0->m_axi_rx_buffer_V_AWREADY(m_axi_rx_buffer_V_AWREADY);
    write_burst_U0->m_axi_rx_buffer_V_AWADDR(write_burst_U0_m_axi_rx_buffer_V_AWADDR);
    write_burst_U0->m_axi_rx_buffer_V_AWID(write_burst_U0_m_axi_rx_buffer_V_AWID);
    write_burst_U0->m_axi_rx_buffer_V_AWLEN(write_burst_U0_m_axi_rx_buffer_V_AWLEN);
    write_burst_U0->m_axi_rx_buffer_V_AWSIZE(write_burst_U0_m_axi_rx_buffer_V_AWSIZE);
    write_burst_U0->m_axi_rx_buffer_V_AWBURST(write_burst_U0_m_axi_rx_buffer_V_AWBURST);
    write_burst_U0->m_axi_rx_buffer_V_AWLOCK(write_burst_U0_m_axi_rx_buffer_V_AWLOCK);
    write_burst_U0->m_axi_rx_buffer_V_AWCACHE(write_burst_U0_m_axi_rx_buffer_V_AWCACHE);
    write_burst_U0->m_axi_rx_buffer_V_AWPROT(write_burst_U0_m_axi_rx_buffer_V_AWPROT);
    write_burst_U0->m_axi_rx_buffer_V_AWQOS(write_burst_U0_m_axi_rx_buffer_V_AWQOS);
    write_burst_U0->m_axi_rx_buffer_V_AWREGION(write_burst_U0_m_axi_rx_buffer_V_AWREGION);
    write_burst_U0->m_axi_rx_buffer_V_AWUSER(write_burst_U0_m_axi_rx_buffer_V_AWUSER);
    write_burst_U0->m_axi_rx_buffer_V_WVALID(write_burst_U0_m_axi_rx_buffer_V_WVALID);
    write_burst_U0->m_axi_rx_buffer_V_WREADY(m_axi_rx_buffer_V_WREADY);
    write_burst_U0->m_axi_rx_buffer_V_WDATA(write_burst_U0_m_axi_rx_buffer_V_WDATA);
    write_burst_U0->m_axi_rx_buffer_V_WSTRB(write_burst_U0_m_axi_rx_buffer_V_WSTRB);
    write_burst_U0->m_axi_rx_buffer_V_WLAST(write_burst_U0_m_axi_rx_buffer_V_WLAST);
    write_burst_U0->m_axi_rx_buffer_V_WID(write_burst_U0_m_axi_rx_buffer_V_WID);
    write_burst_U0->m_axi_rx_buffer_V_WUSER(write_burst_U0_m_axi_rx_buffer_V_WUSER);
    write_burst_U0->m_axi_rx_buffer_V_ARVALID(write_burst_U0_m_axi_rx_buffer_V_ARVALID);
    write_burst_U0->m_axi_rx_buffer_V_ARREADY(ap_var_for_const0);
    write_burst_U0->m_axi_rx_buffer_V_ARADDR(write_burst_U0_m_axi_rx_buffer_V_ARADDR);
    write_burst_U0->m_axi_rx_buffer_V_ARID(write_burst_U0_m_axi_rx_buffer_V_ARID);
    write_burst_U0->m_axi_rx_buffer_V_ARLEN(write_burst_U0_m_axi_rx_buffer_V_ARLEN);
    write_burst_U0->m_axi_rx_buffer_V_ARSIZE(write_burst_U0_m_axi_rx_buffer_V_ARSIZE);
    write_burst_U0->m_axi_rx_buffer_V_ARBURST(write_burst_U0_m_axi_rx_buffer_V_ARBURST);
    write_burst_U0->m_axi_rx_buffer_V_ARLOCK(write_burst_U0_m_axi_rx_buffer_V_ARLOCK);
    write_burst_U0->m_axi_rx_buffer_V_ARCACHE(write_burst_U0_m_axi_rx_buffer_V_ARCACHE);
    write_burst_U0->m_axi_rx_buffer_V_ARPROT(write_burst_U0_m_axi_rx_buffer_V_ARPROT);
    write_burst_U0->m_axi_rx_buffer_V_ARQOS(write_burst_U0_m_axi_rx_buffer_V_ARQOS);
    write_burst_U0->m_axi_rx_buffer_V_ARREGION(write_burst_U0_m_axi_rx_buffer_V_ARREGION);
    write_burst_U0->m_axi_rx_buffer_V_ARUSER(write_burst_U0_m_axi_rx_buffer_V_ARUSER);
    write_burst_U0->m_axi_rx_buffer_V_RVALID(ap_var_for_const0);
    write_burst_U0->m_axi_rx_buffer_V_RREADY(write_burst_U0_m_axi_rx_buffer_V_RREADY);
    write_burst_U0->m_axi_rx_buffer_V_RDATA(ap_var_for_const1);
    write_burst_U0->m_axi_rx_buffer_V_RLAST(ap_var_for_const0);
    write_burst_U0->m_axi_rx_buffer_V_RID(ap_var_for_const3);
    write_burst_U0->m_axi_rx_buffer_V_RUSER(ap_var_for_const3);
    write_burst_U0->m_axi_rx_buffer_V_RRESP(ap_var_for_const4);
    write_burst_U0->m_axi_rx_buffer_V_BVALID(m_axi_rx_buffer_V_BVALID);
    write_burst_U0->m_axi_rx_buffer_V_BREADY(write_burst_U0_m_axi_rx_buffer_V_BREADY);
    write_burst_U0->m_axi_rx_buffer_V_BRESP(m_axi_rx_buffer_V_BRESP);
    write_burst_U0->m_axi_rx_buffer_V_BID(m_axi_rx_buffer_V_BID);
    write_burst_U0->m_axi_rx_buffer_V_BUSER(m_axi_rx_buffer_V_BUSER);
    write_burst_U0->rx_buffer_V_offset_dout(rx_buffer_V_offset_c_2_dout);
    write_burst_U0->rx_buffer_V_offset_empty_n(rx_buffer_V_offset_c_2_empty_n);
    write_burst_U0->rx_buffer_V_offset_read(write_burst_U0_rx_buffer_V_offset_read);
    write_burst_U0->rx_buffer_V_offset_c_dout(rx_buffer_V_offset_c_dout);
    write_burst_U0->rx_buffer_V_offset_c_empty_n(rx_buffer_V_offset_c_empty_n);
    write_burst_U0->rx_buffer_V_offset_c_read(write_burst_U0_rx_buffer_V_offset_c_read);
    rx_buffer_V_offset_c_U = new fifo_w1_d2_A("rx_buffer_V_offset_c_U");
    rx_buffer_V_offset_c_U->clk(ap_clk);
    rx_buffer_V_offset_c_U->reset(ap_rst);
    rx_buffer_V_offset_c_U->if_read_ce(ap_var_for_const2);
    rx_buffer_V_offset_c_U->if_write_ce(ap_var_for_const2);
    rx_buffer_V_offset_c_U->if_din(rx_axis_words7131_U0_rx_buffer_V_offset_out_din);
    rx_buffer_V_offset_c_U->if_full_n(rx_buffer_V_offset_c_full_n);
    rx_buffer_V_offset_c_U->if_write(rx_axis_words7131_U0_rx_buffer_V_offset_out_write);
    rx_buffer_V_offset_c_U->if_dout(rx_buffer_V_offset_c_dout);
    rx_buffer_V_offset_c_U->if_empty_n(rx_buffer_V_offset_c_empty_n);
    rx_buffer_V_offset_c_U->if_read(write_burst_U0_rx_buffer_V_offset_c_read);
    rx_buffer_V_offset_c_2_U = new fifo_w29_d2_A("rx_buffer_V_offset_c_2_U");
    rx_buffer_V_offset_c_2_U->clk(ap_clk);
    rx_buffer_V_offset_c_2_U->reset(ap_rst);
    rx_buffer_V_offset_c_2_U->if_read_ce(ap_var_for_const2);
    rx_buffer_V_offset_c_2_U->if_write_ce(ap_var_for_const2);
    rx_buffer_V_offset_c_2_U->if_din(rx_axis_words7131_U0_rx_buffer_V_offset1_out_din);
    rx_buffer_V_offset_c_2_U->if_full_n(rx_buffer_V_offset_c_2_full_n);
    rx_buffer_V_offset_c_2_U->if_write(rx_axis_words7131_U0_rx_buffer_V_offset1_out_write);
    rx_buffer_V_offset_c_2_U->if_dout(rx_buffer_V_offset_c_2_dout);
    rx_buffer_V_offset_c_2_U->if_empty_n(rx_buffer_V_offset_c_2_empty_n);
    rx_buffer_V_offset_c_2_U->if_read(write_burst_U0_rx_buffer_V_offset_read);
    buffer_offset_V_U = new fifo_w20_d2_A("buffer_offset_V_U");
    buffer_offset_V_U->clk(ap_clk);
    buffer_offset_V_U->reset(ap_rst);
    buffer_offset_V_U->if_read_ce(ap_var_for_const2);
    buffer_offset_V_U->if_write_ce(ap_var_for_const2);
    buffer_offset_V_U->if_din(rx_axis_words7131_U0_ap_return);
    buffer_offset_V_U->if_full_n(buffer_offset_V_full_n);
    buffer_offset_V_U->if_write(ap_channel_done_buffer_offset_V);
    buffer_offset_V_U->if_dout(buffer_offset_V_dout);
    buffer_offset_V_U->if_empty_n(buffer_offset_V_empty_n);
    buffer_offset_V_U->if_read(write_burst_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_channel_done_buffer_offset_V);
    sensitive << ( rx_axis_words7131_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_buffer_offset_V );

    SC_METHOD(thread_ap_channel_done_cache_V);
    sensitive << ( rx_axis_words7131_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_cache_V );

    SC_METHOD(thread_ap_done);
    sensitive << ( write_burst_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( rx_axis_words7131_U0_ap_idle );
    sensitive << ( write_burst_U0_ap_idle );
    sensitive << ( cache_V_t_empty_n );
    sensitive << ( buffer_offset_V_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( rx_axis_words7131_U0_ap_ready );

    SC_METHOD(thread_ap_sync_channel_write_buffer_offset_V);
    sensitive << ( ap_channel_done_buffer_offset_V );
    sensitive << ( buffer_offset_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_buffer_offset_V );

    SC_METHOD(thread_ap_sync_channel_write_cache_V);
    sensitive << ( ap_channel_done_cache_V );
    sensitive << ( rx_axis_words7131_U0_cache_V1_full_n );
    sensitive << ( ap_sync_reg_channel_write_cache_V );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( write_burst_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( rx_axis_words7131_U0_ap_ready );

    SC_METHOD(thread_axis_V_V_TREADY);
    sensitive << ( rx_axis_words7131_U0_axis_V_V_TREADY );

    SC_METHOD(thread_m_axi_rx_buffer_V_ARADDR);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARBURST);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARCACHE);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARID);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARLEN);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARLOCK);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARPROT);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARQOS);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARREGION);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARSIZE);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARUSER);

    SC_METHOD(thread_m_axi_rx_buffer_V_ARVALID);

    SC_METHOD(thread_m_axi_rx_buffer_V_AWADDR);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWADDR );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWBURST);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWBURST );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWCACHE);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWCACHE );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWID);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWID );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWLEN);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWLEN );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWLOCK);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWLOCK );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWPROT);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWPROT );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWQOS);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWQOS );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWREGION);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWREGION );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWSIZE);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWSIZE );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWUSER);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWUSER );

    SC_METHOD(thread_m_axi_rx_buffer_V_AWVALID);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_AWVALID );

    SC_METHOD(thread_m_axi_rx_buffer_V_BREADY);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_BREADY );

    SC_METHOD(thread_m_axi_rx_buffer_V_RREADY);

    SC_METHOD(thread_m_axi_rx_buffer_V_WDATA);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_WDATA );

    SC_METHOD(thread_m_axi_rx_buffer_V_WID);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_WID );

    SC_METHOD(thread_m_axi_rx_buffer_V_WLAST);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_WLAST );

    SC_METHOD(thread_m_axi_rx_buffer_V_WSTRB);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_WSTRB );

    SC_METHOD(thread_m_axi_rx_buffer_V_WUSER);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_WUSER );

    SC_METHOD(thread_m_axi_rx_buffer_V_WVALID);
    sensitive << ( write_burst_U0_m_axi_rx_buffer_V_WVALID );

    SC_METHOD(thread_rx_axis_words7131_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_buffer_offset_V );
    sensitive << ( ap_sync_channel_write_cache_V );

    SC_METHOD(thread_rx_axis_words7131_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_rx_axis_words7131_U0_cache_V1_full_n);
    sensitive << ( cache_V_i_full_n );

    SC_METHOD(thread_rx_axis_words7131_U0_start_full_n);

    SC_METHOD(thread_rx_axis_words7131_U0_start_write);

    SC_METHOD(thread_write_burst_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_write_burst_U0_ap_start);
    sensitive << ( cache_V_t_empty_n );
    sensitive << ( buffer_offset_V_empty_n );

    SC_METHOD(thread_write_burst_U0_start_full_n);

    SC_METHOD(thread_write_burst_U0_start_write);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    ap_sync_reg_channel_write_buffer_offset_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_cache_V = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dataflow_in_loop_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, axis_V_V_TDATA, "(port)axis_V_V_TDATA");
    sc_trace(mVcdFile, loop_count_V, "(port)loop_count_V");
    sc_trace(mVcdFile, final_burst_length_V, "(port)final_burst_length_V");
    sc_trace(mVcdFile, val_assign, "(port)val_assign");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWVALID, "(port)m_axi_rx_buffer_V_AWVALID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWREADY, "(port)m_axi_rx_buffer_V_AWREADY");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWADDR, "(port)m_axi_rx_buffer_V_AWADDR");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWID, "(port)m_axi_rx_buffer_V_AWID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWLEN, "(port)m_axi_rx_buffer_V_AWLEN");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWSIZE, "(port)m_axi_rx_buffer_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWBURST, "(port)m_axi_rx_buffer_V_AWBURST");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWLOCK, "(port)m_axi_rx_buffer_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWCACHE, "(port)m_axi_rx_buffer_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWPROT, "(port)m_axi_rx_buffer_V_AWPROT");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWQOS, "(port)m_axi_rx_buffer_V_AWQOS");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWREGION, "(port)m_axi_rx_buffer_V_AWREGION");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_AWUSER, "(port)m_axi_rx_buffer_V_AWUSER");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_WVALID, "(port)m_axi_rx_buffer_V_WVALID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_WREADY, "(port)m_axi_rx_buffer_V_WREADY");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_WDATA, "(port)m_axi_rx_buffer_V_WDATA");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_WSTRB, "(port)m_axi_rx_buffer_V_WSTRB");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_WLAST, "(port)m_axi_rx_buffer_V_WLAST");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_WID, "(port)m_axi_rx_buffer_V_WID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_WUSER, "(port)m_axi_rx_buffer_V_WUSER");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARVALID, "(port)m_axi_rx_buffer_V_ARVALID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARREADY, "(port)m_axi_rx_buffer_V_ARREADY");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARADDR, "(port)m_axi_rx_buffer_V_ARADDR");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARID, "(port)m_axi_rx_buffer_V_ARID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARLEN, "(port)m_axi_rx_buffer_V_ARLEN");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARSIZE, "(port)m_axi_rx_buffer_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARBURST, "(port)m_axi_rx_buffer_V_ARBURST");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARLOCK, "(port)m_axi_rx_buffer_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARCACHE, "(port)m_axi_rx_buffer_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARPROT, "(port)m_axi_rx_buffer_V_ARPROT");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARQOS, "(port)m_axi_rx_buffer_V_ARQOS");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARREGION, "(port)m_axi_rx_buffer_V_ARREGION");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_ARUSER, "(port)m_axi_rx_buffer_V_ARUSER");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_RVALID, "(port)m_axi_rx_buffer_V_RVALID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_RREADY, "(port)m_axi_rx_buffer_V_RREADY");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_RDATA, "(port)m_axi_rx_buffer_V_RDATA");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_RLAST, "(port)m_axi_rx_buffer_V_RLAST");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_RID, "(port)m_axi_rx_buffer_V_RID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_RUSER, "(port)m_axi_rx_buffer_V_RUSER");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_RRESP, "(port)m_axi_rx_buffer_V_RRESP");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_BVALID, "(port)m_axi_rx_buffer_V_BVALID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_BREADY, "(port)m_axi_rx_buffer_V_BREADY");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_BRESP, "(port)m_axi_rx_buffer_V_BRESP");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_BID, "(port)m_axi_rx_buffer_V_BID");
    sc_trace(mVcdFile, m_axi_rx_buffer_V_BUSER, "(port)m_axi_rx_buffer_V_BUSER");
    sc_trace(mVcdFile, rx_buffer_V_offset, "(port)rx_buffer_V_offset");
    sc_trace(mVcdFile, rx_buffer_V_offset1, "(port)rx_buffer_V_offset1");
    sc_trace(mVcdFile, axis_V_V_TVALID, "(port)axis_V_V_TVALID");
    sc_trace(mVcdFile, axis_V_V_TREADY, "(port)axis_V_V_TREADY");
    sc_trace(mVcdFile, loop_count_V_ap_vld, "(port)loop_count_V_ap_vld");
    sc_trace(mVcdFile, final_burst_length_V_ap_vld, "(port)final_burst_length_V_ap_vld");
    sc_trace(mVcdFile, val_assign_ap_vld, "(port)val_assign_ap_vld");
    sc_trace(mVcdFile, rx_buffer_V_offset1_ap_vld, "(port)rx_buffer_V_offset1_ap_vld");
    sc_trace(mVcdFile, rx_buffer_V_offset_ap_vld, "(port)rx_buffer_V_offset_ap_vld");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, cache_V_i_q0, "cache_V_i_q0");
    sc_trace(mVcdFile, cache_V_t_q0, "cache_V_t_q0");
    sc_trace(mVcdFile, rx_axis_words7131_U0_ap_start, "rx_axis_words7131_U0_ap_start");
    sc_trace(mVcdFile, rx_axis_words7131_U0_ap_done, "rx_axis_words7131_U0_ap_done");
    sc_trace(mVcdFile, rx_axis_words7131_U0_ap_continue, "rx_axis_words7131_U0_ap_continue");
    sc_trace(mVcdFile, rx_axis_words7131_U0_ap_idle, "rx_axis_words7131_U0_ap_idle");
    sc_trace(mVcdFile, rx_axis_words7131_U0_ap_ready, "rx_axis_words7131_U0_ap_ready");
    sc_trace(mVcdFile, rx_axis_words7131_U0_axis_V_V_TREADY, "rx_axis_words7131_U0_axis_V_V_TREADY");
    sc_trace(mVcdFile, rx_axis_words7131_U0_cache_V1_address0, "rx_axis_words7131_U0_cache_V1_address0");
    sc_trace(mVcdFile, rx_axis_words7131_U0_cache_V1_ce0, "rx_axis_words7131_U0_cache_V1_ce0");
    sc_trace(mVcdFile, rx_axis_words7131_U0_cache_V1_we0, "rx_axis_words7131_U0_cache_V1_we0");
    sc_trace(mVcdFile, rx_axis_words7131_U0_cache_V1_d0, "rx_axis_words7131_U0_cache_V1_d0");
    sc_trace(mVcdFile, rx_axis_words7131_U0_rx_buffer_V_offset_out_din, "rx_axis_words7131_U0_rx_buffer_V_offset_out_din");
    sc_trace(mVcdFile, rx_axis_words7131_U0_rx_buffer_V_offset_out_write, "rx_axis_words7131_U0_rx_buffer_V_offset_out_write");
    sc_trace(mVcdFile, rx_axis_words7131_U0_rx_buffer_V_offset1_out_din, "rx_axis_words7131_U0_rx_buffer_V_offset1_out_din");
    sc_trace(mVcdFile, rx_axis_words7131_U0_rx_buffer_V_offset1_out_write, "rx_axis_words7131_U0_rx_buffer_V_offset1_out_write");
    sc_trace(mVcdFile, rx_axis_words7131_U0_ap_return, "rx_axis_words7131_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_buffer_offset_V, "ap_channel_done_buffer_offset_V");
    sc_trace(mVcdFile, buffer_offset_V_full_n, "buffer_offset_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_buffer_offset_V, "ap_sync_reg_channel_write_buffer_offset_V");
    sc_trace(mVcdFile, ap_sync_channel_write_buffer_offset_V, "ap_sync_channel_write_buffer_offset_V");
    sc_trace(mVcdFile, ap_channel_done_cache_V, "ap_channel_done_cache_V");
    sc_trace(mVcdFile, rx_axis_words7131_U0_cache_V1_full_n, "rx_axis_words7131_U0_cache_V1_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_cache_V, "ap_sync_reg_channel_write_cache_V");
    sc_trace(mVcdFile, ap_sync_channel_write_cache_V, "ap_sync_channel_write_cache_V");
    sc_trace(mVcdFile, write_burst_U0_ap_start, "write_burst_U0_ap_start");
    sc_trace(mVcdFile, write_burst_U0_ap_done, "write_burst_U0_ap_done");
    sc_trace(mVcdFile, write_burst_U0_ap_continue, "write_burst_U0_ap_continue");
    sc_trace(mVcdFile, write_burst_U0_ap_idle, "write_burst_U0_ap_idle");
    sc_trace(mVcdFile, write_burst_U0_ap_ready, "write_burst_U0_ap_ready");
    sc_trace(mVcdFile, write_burst_U0_cache_V_address0, "write_burst_U0_cache_V_address0");
    sc_trace(mVcdFile, write_burst_U0_cache_V_ce0, "write_burst_U0_cache_V_ce0");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWVALID, "write_burst_U0_m_axi_rx_buffer_V_AWVALID");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWADDR, "write_burst_U0_m_axi_rx_buffer_V_AWADDR");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWID, "write_burst_U0_m_axi_rx_buffer_V_AWID");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWLEN, "write_burst_U0_m_axi_rx_buffer_V_AWLEN");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWSIZE, "write_burst_U0_m_axi_rx_buffer_V_AWSIZE");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWBURST, "write_burst_U0_m_axi_rx_buffer_V_AWBURST");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWLOCK, "write_burst_U0_m_axi_rx_buffer_V_AWLOCK");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWCACHE, "write_burst_U0_m_axi_rx_buffer_V_AWCACHE");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWPROT, "write_burst_U0_m_axi_rx_buffer_V_AWPROT");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWQOS, "write_burst_U0_m_axi_rx_buffer_V_AWQOS");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWREGION, "write_burst_U0_m_axi_rx_buffer_V_AWREGION");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_AWUSER, "write_burst_U0_m_axi_rx_buffer_V_AWUSER");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_WVALID, "write_burst_U0_m_axi_rx_buffer_V_WVALID");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_WDATA, "write_burst_U0_m_axi_rx_buffer_V_WDATA");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_WSTRB, "write_burst_U0_m_axi_rx_buffer_V_WSTRB");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_WLAST, "write_burst_U0_m_axi_rx_buffer_V_WLAST");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_WID, "write_burst_U0_m_axi_rx_buffer_V_WID");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_WUSER, "write_burst_U0_m_axi_rx_buffer_V_WUSER");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARVALID, "write_burst_U0_m_axi_rx_buffer_V_ARVALID");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARADDR, "write_burst_U0_m_axi_rx_buffer_V_ARADDR");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARID, "write_burst_U0_m_axi_rx_buffer_V_ARID");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARLEN, "write_burst_U0_m_axi_rx_buffer_V_ARLEN");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARSIZE, "write_burst_U0_m_axi_rx_buffer_V_ARSIZE");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARBURST, "write_burst_U0_m_axi_rx_buffer_V_ARBURST");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARLOCK, "write_burst_U0_m_axi_rx_buffer_V_ARLOCK");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARCACHE, "write_burst_U0_m_axi_rx_buffer_V_ARCACHE");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARPROT, "write_burst_U0_m_axi_rx_buffer_V_ARPROT");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARQOS, "write_burst_U0_m_axi_rx_buffer_V_ARQOS");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARREGION, "write_burst_U0_m_axi_rx_buffer_V_ARREGION");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_ARUSER, "write_burst_U0_m_axi_rx_buffer_V_ARUSER");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_RREADY, "write_burst_U0_m_axi_rx_buffer_V_RREADY");
    sc_trace(mVcdFile, write_burst_U0_m_axi_rx_buffer_V_BREADY, "write_burst_U0_m_axi_rx_buffer_V_BREADY");
    sc_trace(mVcdFile, write_burst_U0_rx_buffer_V_offset_read, "write_burst_U0_rx_buffer_V_offset_read");
    sc_trace(mVcdFile, write_burst_U0_rx_buffer_V_offset_c_read, "write_burst_U0_rx_buffer_V_offset_c_read");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, cache_V_i_full_n, "cache_V_i_full_n");
    sc_trace(mVcdFile, cache_V_t_empty_n, "cache_V_t_empty_n");
    sc_trace(mVcdFile, rx_buffer_V_offset_c_full_n, "rx_buffer_V_offset_c_full_n");
    sc_trace(mVcdFile, rx_buffer_V_offset_c_dout, "rx_buffer_V_offset_c_dout");
    sc_trace(mVcdFile, rx_buffer_V_offset_c_empty_n, "rx_buffer_V_offset_c_empty_n");
    sc_trace(mVcdFile, rx_buffer_V_offset_c_2_full_n, "rx_buffer_V_offset_c_2_full_n");
    sc_trace(mVcdFile, rx_buffer_V_offset_c_2_dout, "rx_buffer_V_offset_c_2_dout");
    sc_trace(mVcdFile, rx_buffer_V_offset_c_2_empty_n, "rx_buffer_V_offset_c_2_empty_n");
    sc_trace(mVcdFile, buffer_offset_V_dout, "buffer_offset_V_dout");
    sc_trace(mVcdFile, buffer_offset_V_empty_n, "buffer_offset_V_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, rx_axis_words7131_U0_start_full_n, "rx_axis_words7131_U0_start_full_n");
    sc_trace(mVcdFile, rx_axis_words7131_U0_start_write, "rx_axis_words7131_U0_start_write");
    sc_trace(mVcdFile, write_burst_U0_start_full_n, "write_burst_U0_start_full_n");
    sc_trace(mVcdFile, write_burst_U0_start_write, "write_burst_U0_start_write");
#endif

    }
}

dataflow_in_loop::~dataflow_in_loop() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete cache_V_U;
    delete rx_axis_words7131_U0;
    delete write_burst_U0;
    delete rx_buffer_V_offset_c_U;
    delete rx_buffer_V_offset_c_2_U;
    delete buffer_offset_V_U;
}

void dataflow_in_loop::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void dataflow_in_loop::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void dataflow_in_loop::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_0;
}

void dataflow_in_loop::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void dataflow_in_loop::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void dataflow_in_loop::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_buffer_offset_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (rx_axis_words7131_U0_ap_done.read() & 
             rx_axis_words7131_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_buffer_offset_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_buffer_offset_V = ap_sync_channel_write_buffer_offset_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_cache_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (rx_axis_words7131_U0_ap_done.read() & 
             rx_axis_words7131_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_cache_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_cache_V = ap_sync_channel_write_cache_V.read();
        }
    }
}

void dataflow_in_loop::thread_ap_channel_done_buffer_offset_V() {
    ap_channel_done_buffer_offset_V = (rx_axis_words7131_U0_ap_done.read() & (ap_sync_reg_channel_write_buffer_offset_V.read() ^ 
  ap_const_logic_1));
}

void dataflow_in_loop::thread_ap_channel_done_cache_V() {
    ap_channel_done_cache_V = (rx_axis_words7131_U0_ap_done.read() & (ap_sync_reg_channel_write_cache_V.read() ^ 
  ap_const_logic_1));
}

void dataflow_in_loop::thread_ap_done() {
    ap_done = write_burst_U0_ap_done.read();
}

void dataflow_in_loop::thread_ap_idle() {
    ap_idle = (rx_axis_words7131_U0_ap_idle.read() & write_burst_U0_ap_idle.read() & (cache_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (buffer_offset_V_empty_n.read() ^ 
  ap_const_logic_1));
}

void dataflow_in_loop::thread_ap_ready() {
    ap_ready = rx_axis_words7131_U0_ap_ready.read();
}

void dataflow_in_loop::thread_ap_sync_channel_write_buffer_offset_V() {
    ap_sync_channel_write_buffer_offset_V = ((ap_channel_done_buffer_offset_V.read() & 
  buffer_offset_V_full_n.read()) | ap_sync_reg_channel_write_buffer_offset_V.read());
}

void dataflow_in_loop::thread_ap_sync_channel_write_cache_V() {
    ap_sync_channel_write_cache_V = ((ap_channel_done_cache_V.read() & 
  rx_axis_words7131_U0_cache_V1_full_n.read()) | ap_sync_reg_channel_write_cache_V.read());
}

void dataflow_in_loop::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void dataflow_in_loop::thread_ap_sync_done() {
    ap_sync_done = write_burst_U0_ap_done.read();
}

void dataflow_in_loop::thread_ap_sync_ready() {
    ap_sync_ready = rx_axis_words7131_U0_ap_ready.read();
}

void dataflow_in_loop::thread_axis_V_V_TREADY() {
    axis_V_V_TREADY = rx_axis_words7131_U0_axis_V_V_TREADY.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARADDR() {
    m_axi_rx_buffer_V_ARADDR = ap_const_lv32_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARBURST() {
    m_axi_rx_buffer_V_ARBURST = ap_const_lv2_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARCACHE() {
    m_axi_rx_buffer_V_ARCACHE = ap_const_lv4_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARID() {
    m_axi_rx_buffer_V_ARID = ap_const_lv1_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARLEN() {
    m_axi_rx_buffer_V_ARLEN = ap_const_lv32_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARLOCK() {
    m_axi_rx_buffer_V_ARLOCK = ap_const_lv2_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARPROT() {
    m_axi_rx_buffer_V_ARPROT = ap_const_lv3_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARQOS() {
    m_axi_rx_buffer_V_ARQOS = ap_const_lv4_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARREGION() {
    m_axi_rx_buffer_V_ARREGION = ap_const_lv4_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARSIZE() {
    m_axi_rx_buffer_V_ARSIZE = ap_const_lv3_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARUSER() {
    m_axi_rx_buffer_V_ARUSER = ap_const_lv1_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_ARVALID() {
    m_axi_rx_buffer_V_ARVALID = ap_const_logic_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWADDR() {
    m_axi_rx_buffer_V_AWADDR = write_burst_U0_m_axi_rx_buffer_V_AWADDR.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWBURST() {
    m_axi_rx_buffer_V_AWBURST = write_burst_U0_m_axi_rx_buffer_V_AWBURST.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWCACHE() {
    m_axi_rx_buffer_V_AWCACHE = write_burst_U0_m_axi_rx_buffer_V_AWCACHE.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWID() {
    m_axi_rx_buffer_V_AWID = write_burst_U0_m_axi_rx_buffer_V_AWID.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWLEN() {
    m_axi_rx_buffer_V_AWLEN = write_burst_U0_m_axi_rx_buffer_V_AWLEN.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWLOCK() {
    m_axi_rx_buffer_V_AWLOCK = write_burst_U0_m_axi_rx_buffer_V_AWLOCK.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWPROT() {
    m_axi_rx_buffer_V_AWPROT = write_burst_U0_m_axi_rx_buffer_V_AWPROT.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWQOS() {
    m_axi_rx_buffer_V_AWQOS = write_burst_U0_m_axi_rx_buffer_V_AWQOS.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWREGION() {
    m_axi_rx_buffer_V_AWREGION = write_burst_U0_m_axi_rx_buffer_V_AWREGION.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWSIZE() {
    m_axi_rx_buffer_V_AWSIZE = write_burst_U0_m_axi_rx_buffer_V_AWSIZE.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWUSER() {
    m_axi_rx_buffer_V_AWUSER = write_burst_U0_m_axi_rx_buffer_V_AWUSER.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_AWVALID() {
    m_axi_rx_buffer_V_AWVALID = write_burst_U0_m_axi_rx_buffer_V_AWVALID.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_BREADY() {
    m_axi_rx_buffer_V_BREADY = write_burst_U0_m_axi_rx_buffer_V_BREADY.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_RREADY() {
    m_axi_rx_buffer_V_RREADY = ap_const_logic_0;
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_WDATA() {
    m_axi_rx_buffer_V_WDATA = write_burst_U0_m_axi_rx_buffer_V_WDATA.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_WID() {
    m_axi_rx_buffer_V_WID = write_burst_U0_m_axi_rx_buffer_V_WID.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_WLAST() {
    m_axi_rx_buffer_V_WLAST = write_burst_U0_m_axi_rx_buffer_V_WLAST.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_WSTRB() {
    m_axi_rx_buffer_V_WSTRB = write_burst_U0_m_axi_rx_buffer_V_WSTRB.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_WUSER() {
    m_axi_rx_buffer_V_WUSER = write_burst_U0_m_axi_rx_buffer_V_WUSER.read();
}

void dataflow_in_loop::thread_m_axi_rx_buffer_V_WVALID() {
    m_axi_rx_buffer_V_WVALID = write_burst_U0_m_axi_rx_buffer_V_WVALID.read();
}

void dataflow_in_loop::thread_rx_axis_words7131_U0_ap_continue() {
    rx_axis_words7131_U0_ap_continue = (ap_sync_channel_write_buffer_offset_V.read() & ap_sync_channel_write_cache_V.read());
}

void dataflow_in_loop::thread_rx_axis_words7131_U0_ap_start() {
    rx_axis_words7131_U0_ap_start = ap_start.read();
}

void dataflow_in_loop::thread_rx_axis_words7131_U0_cache_V1_full_n() {
    rx_axis_words7131_U0_cache_V1_full_n = cache_V_i_full_n.read();
}

void dataflow_in_loop::thread_rx_axis_words7131_U0_start_full_n() {
    rx_axis_words7131_U0_start_full_n = ap_const_logic_1;
}

void dataflow_in_loop::thread_rx_axis_words7131_U0_start_write() {
    rx_axis_words7131_U0_start_write = ap_const_logic_0;
}

void dataflow_in_loop::thread_write_burst_U0_ap_continue() {
    write_burst_U0_ap_continue = ap_continue.read();
}

void dataflow_in_loop::thread_write_burst_U0_ap_start() {
    write_burst_U0_ap_start = (cache_V_t_empty_n.read() & buffer_offset_V_empty_n.read());
}

void dataflow_in_loop::thread_write_burst_U0_start_full_n() {
    write_burst_U0_start_full_n = ap_const_logic_1;
}

void dataflow_in_loop::thread_write_burst_U0_start_write() {
    write_burst_U0_start_write = ap_const_logic_0;
}

}

