// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rx_axis_words25 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        axis_V_V_TDATA,
        axis_V_V_TVALID,
        axis_V_V_TREADY,
        loop_count_V,
        final_burst_length_V,
        val_assign,
        cache_V_address0,
        cache_V_ce0,
        cache_V_we0,
        cache_V_d0,
        rx_buffer_V_offset,
        rx_buffer_V_offset_out_din,
        rx_buffer_V_offset_out_full_n,
        rx_buffer_V_offset_out_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] axis_V_V_TDATA;
input   axis_V_V_TVALID;
output   axis_V_V_TREADY;
input  [12:0] loop_count_V;
input  [9:0] final_burst_length_V;
input  [12:0] val_assign;
output  [8:0] cache_V_address0;
output   cache_V_ce0;
output   cache_V_we0;
output  [63:0] cache_V_d0;
input  [28:0] rx_buffer_V_offset;
output  [28:0] rx_buffer_V_offset_out_din;
input   rx_buffer_V_offset_out_full_n;
output   rx_buffer_V_offset_out_write;
output  [20:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg axis_V_V_TREADY;
reg cache_V_ce0;
reg cache_V_we0;
reg rx_buffer_V_offset_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    axis_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond1_i_i_i_fu_196_p2;
wire   [0:0] tmp_3_i_i_i_fu_211_p2;
reg    rx_buffer_V_offset_out_blk_n;
wire    ap_CS_fsm_state2;
reg   [9:0] i_i_i_i_reg_136;
wire   [11:0] tmp_fu_160_p1;
reg   [11:0] tmp_reg_247;
reg    ap_block_state1;
wire   [0:0] tmp_i_i_i_fu_178_p2;
reg   [0:0] tmp_i_i_i_reg_252;
reg   [0:0] exitcond1_i_i_i_reg_257;
reg    ap_predicate_op33_read_state3;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] i_fu_202_p2;
reg   [9:0] i_reg_261;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [9:0] ap_phi_mux_i_i_i_i_phi_fu_140_p4;
wire   [63:0] ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148;
reg   [63:0] ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148;
wire   [63:0] tmp_5_i_i_i_fu_228_p1;
reg   [9:0] p_092_1_i_i_i_fu_82;
wire   [9:0] final_burst_length_V_4_fu_184_p3;
wire   [9:0] data_length_V_1_i_i_s_fu_217_p2;
wire   [13:0] lhs_V_cast_i_i_i_fu_164_p1;
wire   [13:0] tmp_cast_i_i_i_fu_174_p1;
wire   [13:0] r_V_fu_168_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_99;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((rx_buffer_V_offset_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((rx_buffer_V_offset_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_99)) begin
        if (((tmp_3_i_i_i_fu_211_p2 == 1'd0) & (exitcond1_i_i_i_fu_196_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 <= axis_V_V_TDATA;
        end else if (((tmp_3_i_i_i_fu_211_p2 == 1'd1) & (exitcond1_i_i_i_fu_196_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 <= 64'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148 <= ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((rx_buffer_V_offset_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_i_i_i_reg_136 <= 10'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_i_i_i_reg_257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_i_i_i_reg_136 <= i_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op33_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_092_1_i_i_i_fu_82 <= data_length_V_1_i_i_s_fu_217_p2;
    end else if (((rx_buffer_V_offset_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_092_1_i_i_i_fu_82 <= final_burst_length_V_4_fu_184_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_i_i_i_reg_257 <= exitcond1_i_i_i_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_261 <= i_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_i_i_i_reg_252 <= tmp_i_i_i_fu_178_p2;
        tmp_reg_247 <= tmp_fu_160_p1;
    end
end

always @ (*) begin
    if ((exitcond1_i_i_i_fu_196_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_i_i_reg_257 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_i_i_i_phi_fu_140_p4 = i_reg_261;
    end else begin
        ap_phi_mux_i_i_i_i_phi_fu_140_p4 = i_i_i_i_reg_136;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_i_i_i_fu_211_p2 == 1'd0) & (exitcond1_i_i_i_fu_196_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axis_V_V_TDATA_blk_n = axis_V_V_TVALID;
    end else begin
        axis_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op33_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axis_V_V_TREADY = 1'b1;
    end else begin
        axis_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cache_V_ce0 = 1'b1;
    end else begin
        cache_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_i_i_i_reg_257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cache_V_we0 = 1'b1;
    end else begin
        cache_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rx_buffer_V_offset_out_blk_n = rx_buffer_V_offset_out_full_n;
    end else begin
        rx_buffer_V_offset_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((rx_buffer_V_offset_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        rx_buffer_V_offset_out_write = 1'b1;
    end else begin
        rx_buffer_V_offset_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((rx_buffer_V_offset_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond1_i_i_i_fu_196_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond1_i_i_i_fu_196_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((axis_V_V_TVALID == 1'b0) & (ap_predicate_op33_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((axis_V_V_TVALID == 1'b0) & (ap_predicate_op33_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((axis_V_V_TVALID == 1'b0) & (ap_predicate_op33_read_state3 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_99 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_088_1_i_i_i_reg_148 = 'bx;

always @ (*) begin
    ap_predicate_op33_read_state3 = ((tmp_3_i_i_i_fu_211_p2 == 1'd0) & (exitcond1_i_i_i_fu_196_p2 == 1'd0));
end

assign ap_return = {{tmp_reg_247}, {9'd0}};

assign cache_V_address0 = tmp_5_i_i_i_fu_228_p1;

assign cache_V_d0 = ap_phi_reg_pp0_iter1_p_088_1_i_i_i_reg_148;

assign data_length_V_1_i_i_s_fu_217_p2 = ($signed(p_092_1_i_i_i_fu_82) + $signed(10'd1023));

assign exitcond1_i_i_i_fu_196_p2 = ((ap_phi_mux_i_i_i_i_phi_fu_140_p4 == 10'd512) ? 1'b1 : 1'b0);

assign final_burst_length_V_4_fu_184_p3 = ((tmp_i_i_i_reg_252[0:0] === 1'b1) ? final_burst_length_V : 10'd512);

assign i_fu_202_p2 = (ap_phi_mux_i_i_i_i_phi_fu_140_p4 + 10'd1);

assign lhs_V_cast_i_i_i_fu_164_p1 = loop_count_V;

assign r_V_fu_168_p2 = ($signed(14'd16383) + $signed(lhs_V_cast_i_i_i_fu_164_p1));

assign rx_buffer_V_offset_out_din = rx_buffer_V_offset;

assign tmp_3_i_i_i_fu_211_p2 = ((p_092_1_i_i_i_fu_82 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_5_i_i_i_fu_228_p1 = i_i_i_i_reg_136;

assign tmp_cast_i_i_i_fu_174_p1 = tmp_fu_160_p1;

assign tmp_fu_160_p1 = val_assign[11:0];

assign tmp_i_i_i_fu_178_p2 = ((tmp_cast_i_i_i_fu_174_p1 == r_V_fu_168_p2) ? 1'b1 : 1'b0);

endmodule //rx_axis_words25
