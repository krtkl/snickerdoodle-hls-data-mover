// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_mover,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-3,HLS_INPUT_CLOCK=6.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1112,HLS_SYN_LUT=1834}" *)

module data_mover (
        ap_clk,
        ap_rst_n,
        m_axi_DMA_AWVALID,
        m_axi_DMA_AWREADY,
        m_axi_DMA_AWADDR,
        m_axi_DMA_AWID,
        m_axi_DMA_AWLEN,
        m_axi_DMA_AWSIZE,
        m_axi_DMA_AWBURST,
        m_axi_DMA_AWLOCK,
        m_axi_DMA_AWCACHE,
        m_axi_DMA_AWPROT,
        m_axi_DMA_AWQOS,
        m_axi_DMA_AWREGION,
        m_axi_DMA_AWUSER,
        m_axi_DMA_WVALID,
        m_axi_DMA_WREADY,
        m_axi_DMA_WDATA,
        m_axi_DMA_WSTRB,
        m_axi_DMA_WLAST,
        m_axi_DMA_WID,
        m_axi_DMA_WUSER,
        m_axi_DMA_ARVALID,
        m_axi_DMA_ARREADY,
        m_axi_DMA_ARADDR,
        m_axi_DMA_ARID,
        m_axi_DMA_ARLEN,
        m_axi_DMA_ARSIZE,
        m_axi_DMA_ARBURST,
        m_axi_DMA_ARLOCK,
        m_axi_DMA_ARCACHE,
        m_axi_DMA_ARPROT,
        m_axi_DMA_ARQOS,
        m_axi_DMA_ARREGION,
        m_axi_DMA_ARUSER,
        m_axi_DMA_RVALID,
        m_axi_DMA_RREADY,
        m_axi_DMA_RDATA,
        m_axi_DMA_RLAST,
        m_axi_DMA_RID,
        m_axi_DMA_RUSER,
        m_axi_DMA_RRESP,
        m_axi_DMA_BVALID,
        m_axi_DMA_BREADY,
        m_axi_DMA_BRESP,
        m_axi_DMA_BID,
        m_axi_DMA_BUSER,
        data_rx_V_V_TDATA,
        data_rx_V_V_TVALID,
        data_rx_V_V_TREADY,
        data_tx_V_V_TDATA,
        data_tx_V_V_TVALID,
        data_tx_V_V_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DMA_ID_WIDTH = 1;
parameter    C_M_AXI_DMA_ADDR_WIDTH = 32;
parameter    C_M_AXI_DMA_DATA_WIDTH = 64;
parameter    C_M_AXI_DMA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DMA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DMA_WUSER_WIDTH = 1;
parameter    C_M_AXI_DMA_RUSER_WIDTH = 1;
parameter    C_M_AXI_DMA_BUSER_WIDTH = 1;
parameter    C_M_AXI_DMA_USER_VALUE = 0;
parameter    C_M_AXI_DMA_PROT_VALUE = 0;
parameter    C_M_AXI_DMA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DMA_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DMA_AWVALID;
input   m_axi_DMA_AWREADY;
output  [C_M_AXI_DMA_ADDR_WIDTH - 1:0] m_axi_DMA_AWADDR;
output  [C_M_AXI_DMA_ID_WIDTH - 1:0] m_axi_DMA_AWID;
output  [7:0] m_axi_DMA_AWLEN;
output  [2:0] m_axi_DMA_AWSIZE;
output  [1:0] m_axi_DMA_AWBURST;
output  [1:0] m_axi_DMA_AWLOCK;
output  [3:0] m_axi_DMA_AWCACHE;
output  [2:0] m_axi_DMA_AWPROT;
output  [3:0] m_axi_DMA_AWQOS;
output  [3:0] m_axi_DMA_AWREGION;
output  [C_M_AXI_DMA_AWUSER_WIDTH - 1:0] m_axi_DMA_AWUSER;
output   m_axi_DMA_WVALID;
input   m_axi_DMA_WREADY;
output  [C_M_AXI_DMA_DATA_WIDTH - 1:0] m_axi_DMA_WDATA;
output  [C_M_AXI_DMA_WSTRB_WIDTH - 1:0] m_axi_DMA_WSTRB;
output   m_axi_DMA_WLAST;
output  [C_M_AXI_DMA_ID_WIDTH - 1:0] m_axi_DMA_WID;
output  [C_M_AXI_DMA_WUSER_WIDTH - 1:0] m_axi_DMA_WUSER;
output   m_axi_DMA_ARVALID;
input   m_axi_DMA_ARREADY;
output  [C_M_AXI_DMA_ADDR_WIDTH - 1:0] m_axi_DMA_ARADDR;
output  [C_M_AXI_DMA_ID_WIDTH - 1:0] m_axi_DMA_ARID;
output  [7:0] m_axi_DMA_ARLEN;
output  [2:0] m_axi_DMA_ARSIZE;
output  [1:0] m_axi_DMA_ARBURST;
output  [1:0] m_axi_DMA_ARLOCK;
output  [3:0] m_axi_DMA_ARCACHE;
output  [2:0] m_axi_DMA_ARPROT;
output  [3:0] m_axi_DMA_ARQOS;
output  [3:0] m_axi_DMA_ARREGION;
output  [C_M_AXI_DMA_ARUSER_WIDTH - 1:0] m_axi_DMA_ARUSER;
input   m_axi_DMA_RVALID;
output   m_axi_DMA_RREADY;
input  [C_M_AXI_DMA_DATA_WIDTH - 1:0] m_axi_DMA_RDATA;
input   m_axi_DMA_RLAST;
input  [C_M_AXI_DMA_ID_WIDTH - 1:0] m_axi_DMA_RID;
input  [C_M_AXI_DMA_RUSER_WIDTH - 1:0] m_axi_DMA_RUSER;
input  [1:0] m_axi_DMA_RRESP;
input   m_axi_DMA_BVALID;
output   m_axi_DMA_BREADY;
input  [1:0] m_axi_DMA_BRESP;
input  [C_M_AXI_DMA_ID_WIDTH - 1:0] m_axi_DMA_BID;
input  [C_M_AXI_DMA_BUSER_WIDTH - 1:0] m_axi_DMA_BUSER;
input  [7:0] data_rx_V_V_TDATA;
input   data_rx_V_V_TVALID;
output   data_rx_V_V_TREADY;
output  [7:0] data_tx_V_V_TDATA;
output   data_tx_V_V_TVALID;
input   data_tx_V_V_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire    data_rx_V_V_0_vld_in;
wire    data_rx_V_V_0_ack_out;
reg   [1:0] data_rx_V_V_0_state;
reg   [7:0] data_tx_V_V_1_data_out;
wire    data_tx_V_V_1_vld_in;
wire    data_tx_V_V_1_vld_out;
wire    data_tx_V_V_1_ack_in;
wire    data_tx_V_V_1_ack_out;
reg   [7:0] data_tx_V_V_1_payload_A;
reg   [7:0] data_tx_V_V_1_payload_B;
reg    data_tx_V_V_1_sel_rd;
reg    data_tx_V_V_1_sel_wr;
wire    data_tx_V_V_1_sel;
wire    data_tx_V_V_1_load_A;
wire    data_tx_V_V_1_load_B;
reg   [1:0] data_tx_V_V_1_state;
wire    data_tx_V_V_1_state_cmp_full;
wire   [31:0] tx_buffer_V;
wire   [24:0] tx_buffer_length_V;
wire   [31:0] rx_buffer_V;
wire   [24:0] rx_buffer_length_V;
wire    DMA_AWREADY;
wire    DMA_WREADY;
reg    DMA_ARVALID;
wire    DMA_ARREADY;
wire    DMA_RVALID;
reg    DMA_RREADY;
wire   [63:0] DMA_RDATA;
wire    DMA_RLAST;
wire   [0:0] DMA_RID;
wire   [0:0] DMA_RUSER;
wire   [1:0] DMA_RRESP;
wire    DMA_BVALID;
wire   [1:0] DMA_BRESP;
wire   [0:0] DMA_BID;
wire   [0:0] DMA_BUSER;
reg   [28:0] tx_buffer_V1_reg_150;
wire   [12:0] tx_final_burst_lengt_fu_132_p3;
reg   [12:0] tx_final_burst_lengt_reg_155;
wire   [12:0] tx_loop_count_V_fu_141_p3;
reg   [12:0] tx_loop_count_V_reg_160;
wire   [7:0] grp_tx_loop_fu_80_axis_V_V_TDATA;
wire    grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWVALID;
wire   [31:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWADDR;
wire   [0:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWID;
wire   [31:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWLEN;
wire   [2:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWSIZE;
wire   [1:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWBURST;
wire   [1:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWLOCK;
wire   [3:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWCACHE;
wire   [2:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWPROT;
wire   [3:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWQOS;
wire   [3:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWREGION;
wire   [0:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWUSER;
wire    grp_tx_loop_fu_80_m_axi_tx_buffer_V_WVALID;
wire   [63:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_WDATA;
wire   [7:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_WSTRB;
wire    grp_tx_loop_fu_80_m_axi_tx_buffer_V_WLAST;
wire   [0:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_WID;
wire   [0:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_WUSER;
wire    grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARVALID;
wire   [31:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARADDR;
wire   [0:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARID;
wire   [31:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARLEN;
wire   [2:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARSIZE;
wire   [1:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARBURST;
wire   [1:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARLOCK;
wire   [3:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARCACHE;
wire   [2:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARPROT;
wire   [3:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARQOS;
wire   [3:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARREGION;
wire   [0:0] grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARUSER;
wire    grp_tx_loop_fu_80_m_axi_tx_buffer_V_RREADY;
wire    grp_tx_loop_fu_80_m_axi_tx_buffer_V_BREADY;
wire    grp_tx_loop_fu_80_axis_V_V_TVALID;
wire    grp_tx_loop_fu_80_axis_V_V_TREADY;
wire    grp_tx_loop_fu_80_ap_done;
wire    grp_tx_loop_fu_80_ap_start;
wire    grp_tx_loop_fu_80_ap_ready;
wire    grp_tx_loop_fu_80_ap_idle;
reg    grp_tx_loop_fu_80_ap_continue;
reg    grp_tx_loop_fu_80_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_tx_loop_fu_80_ap_ready;
wire    ap_sync_grp_tx_loop_fu_80_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_tx_loop_fu_80_ap_ready;
reg    ap_sync_reg_grp_tx_loop_fu_80_ap_done;
wire   [11:0] r_V_fu_102_p1;
wire   [12:0] tmp_4_i_fu_112_p4;
wire   [0:0] tmp_i_fu_106_p2;
wire   [12:0] tmp_6_i_cast_fu_122_p1;
wire   [12:0] tmp_9_i_fu_126_p2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 data_rx_V_V_0_state = 2'd0;
#0 data_tx_V_V_1_sel_rd = 1'b0;
#0 data_tx_V_V_1_sel_wr = 1'b0;
#0 data_tx_V_V_1_state = 2'd0;
#0 grp_tx_loop_fu_80_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_tx_loop_fu_80_ap_ready = 1'b0;
#0 ap_sync_reg_grp_tx_loop_fu_80_ap_done = 1'b0;
end

data_mover_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
data_mover_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .tx_buffer_V(tx_buffer_V),
    .tx_buffer_length_V(tx_buffer_length_V),
    .rx_buffer_V(rx_buffer_V),
    .rx_buffer_length_V(rx_buffer_length_V)
);

data_mover_DMA_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DMA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DMA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DMA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DMA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DMA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DMA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DMA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DMA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DMA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DMA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DMA_CACHE_VALUE ))
data_mover_DMA_m_axi_U(
    .AWVALID(m_axi_DMA_AWVALID),
    .AWREADY(m_axi_DMA_AWREADY),
    .AWADDR(m_axi_DMA_AWADDR),
    .AWID(m_axi_DMA_AWID),
    .AWLEN(m_axi_DMA_AWLEN),
    .AWSIZE(m_axi_DMA_AWSIZE),
    .AWBURST(m_axi_DMA_AWBURST),
    .AWLOCK(m_axi_DMA_AWLOCK),
    .AWCACHE(m_axi_DMA_AWCACHE),
    .AWPROT(m_axi_DMA_AWPROT),
    .AWQOS(m_axi_DMA_AWQOS),
    .AWREGION(m_axi_DMA_AWREGION),
    .AWUSER(m_axi_DMA_AWUSER),
    .WVALID(m_axi_DMA_WVALID),
    .WREADY(m_axi_DMA_WREADY),
    .WDATA(m_axi_DMA_WDATA),
    .WSTRB(m_axi_DMA_WSTRB),
    .WLAST(m_axi_DMA_WLAST),
    .WID(m_axi_DMA_WID),
    .WUSER(m_axi_DMA_WUSER),
    .ARVALID(m_axi_DMA_ARVALID),
    .ARREADY(m_axi_DMA_ARREADY),
    .ARADDR(m_axi_DMA_ARADDR),
    .ARID(m_axi_DMA_ARID),
    .ARLEN(m_axi_DMA_ARLEN),
    .ARSIZE(m_axi_DMA_ARSIZE),
    .ARBURST(m_axi_DMA_ARBURST),
    .ARLOCK(m_axi_DMA_ARLOCK),
    .ARCACHE(m_axi_DMA_ARCACHE),
    .ARPROT(m_axi_DMA_ARPROT),
    .ARQOS(m_axi_DMA_ARQOS),
    .ARREGION(m_axi_DMA_ARREGION),
    .ARUSER(m_axi_DMA_ARUSER),
    .RVALID(m_axi_DMA_RVALID),
    .RREADY(m_axi_DMA_RREADY),
    .RDATA(m_axi_DMA_RDATA),
    .RLAST(m_axi_DMA_RLAST),
    .RID(m_axi_DMA_RID),
    .RUSER(m_axi_DMA_RUSER),
    .RRESP(m_axi_DMA_RRESP),
    .BVALID(m_axi_DMA_BVALID),
    .BREADY(m_axi_DMA_BREADY),
    .BRESP(m_axi_DMA_BRESP),
    .BID(m_axi_DMA_BID),
    .BUSER(m_axi_DMA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DMA_ARVALID),
    .I_ARREADY(DMA_ARREADY),
    .I_ARADDR(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARADDR),
    .I_ARID(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARID),
    .I_ARLEN(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARLEN),
    .I_ARSIZE(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARSIZE),
    .I_ARLOCK(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARLOCK),
    .I_ARCACHE(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARCACHE),
    .I_ARQOS(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARQOS),
    .I_ARPROT(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARPROT),
    .I_ARUSER(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARUSER),
    .I_ARBURST(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARBURST),
    .I_ARREGION(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARREGION),
    .I_RVALID(DMA_RVALID),
    .I_RREADY(DMA_RREADY),
    .I_RDATA(DMA_RDATA),
    .I_RID(DMA_RID),
    .I_RUSER(DMA_RUSER),
    .I_RRESP(DMA_RRESP),
    .I_RLAST(DMA_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DMA_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DMA_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(DMA_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DMA_BRESP),
    .I_BID(DMA_BID),
    .I_BUSER(DMA_BUSER)
);

tx_loop grp_tx_loop_fu_80(
    .axis_V_V_TDATA(grp_tx_loop_fu_80_axis_V_V_TDATA),
    .m_axi_tx_buffer_V_AWVALID(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWVALID),
    .m_axi_tx_buffer_V_AWREADY(1'b0),
    .m_axi_tx_buffer_V_AWADDR(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWADDR),
    .m_axi_tx_buffer_V_AWID(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWID),
    .m_axi_tx_buffer_V_AWLEN(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWLEN),
    .m_axi_tx_buffer_V_AWSIZE(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWSIZE),
    .m_axi_tx_buffer_V_AWBURST(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWBURST),
    .m_axi_tx_buffer_V_AWLOCK(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWLOCK),
    .m_axi_tx_buffer_V_AWCACHE(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWCACHE),
    .m_axi_tx_buffer_V_AWPROT(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWPROT),
    .m_axi_tx_buffer_V_AWQOS(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWQOS),
    .m_axi_tx_buffer_V_AWREGION(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWREGION),
    .m_axi_tx_buffer_V_AWUSER(grp_tx_loop_fu_80_m_axi_tx_buffer_V_AWUSER),
    .m_axi_tx_buffer_V_WVALID(grp_tx_loop_fu_80_m_axi_tx_buffer_V_WVALID),
    .m_axi_tx_buffer_V_WREADY(1'b0),
    .m_axi_tx_buffer_V_WDATA(grp_tx_loop_fu_80_m_axi_tx_buffer_V_WDATA),
    .m_axi_tx_buffer_V_WSTRB(grp_tx_loop_fu_80_m_axi_tx_buffer_V_WSTRB),
    .m_axi_tx_buffer_V_WLAST(grp_tx_loop_fu_80_m_axi_tx_buffer_V_WLAST),
    .m_axi_tx_buffer_V_WID(grp_tx_loop_fu_80_m_axi_tx_buffer_V_WID),
    .m_axi_tx_buffer_V_WUSER(grp_tx_loop_fu_80_m_axi_tx_buffer_V_WUSER),
    .m_axi_tx_buffer_V_ARVALID(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARVALID),
    .m_axi_tx_buffer_V_ARREADY(DMA_ARREADY),
    .m_axi_tx_buffer_V_ARADDR(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARADDR),
    .m_axi_tx_buffer_V_ARID(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARID),
    .m_axi_tx_buffer_V_ARLEN(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARLEN),
    .m_axi_tx_buffer_V_ARSIZE(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARSIZE),
    .m_axi_tx_buffer_V_ARBURST(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARBURST),
    .m_axi_tx_buffer_V_ARLOCK(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARLOCK),
    .m_axi_tx_buffer_V_ARCACHE(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARCACHE),
    .m_axi_tx_buffer_V_ARPROT(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARPROT),
    .m_axi_tx_buffer_V_ARQOS(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARQOS),
    .m_axi_tx_buffer_V_ARREGION(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARREGION),
    .m_axi_tx_buffer_V_ARUSER(grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARUSER),
    .m_axi_tx_buffer_V_RVALID(DMA_RVALID),
    .m_axi_tx_buffer_V_RREADY(grp_tx_loop_fu_80_m_axi_tx_buffer_V_RREADY),
    .m_axi_tx_buffer_V_RDATA(DMA_RDATA),
    .m_axi_tx_buffer_V_RLAST(DMA_RLAST),
    .m_axi_tx_buffer_V_RID(DMA_RID),
    .m_axi_tx_buffer_V_RUSER(DMA_RUSER),
    .m_axi_tx_buffer_V_RRESP(DMA_RRESP),
    .m_axi_tx_buffer_V_BVALID(1'b0),
    .m_axi_tx_buffer_V_BREADY(grp_tx_loop_fu_80_m_axi_tx_buffer_V_BREADY),
    .m_axi_tx_buffer_V_BRESP(2'd0),
    .m_axi_tx_buffer_V_BID(1'd0),
    .m_axi_tx_buffer_V_BUSER(1'd0),
    .tx_buffer_V_offset(tx_buffer_V1_reg_150),
    .loop_count_V(tx_loop_count_V_reg_160),
    .final_burst_length_V(tx_final_burst_lengt_reg_155),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .tx_buffer_V_offset_ap_vld(1'b1),
    .loop_count_V_ap_vld(1'b1),
    .final_burst_length_V_ap_vld(1'b1),
    .axis_V_V_TVALID(grp_tx_loop_fu_80_axis_V_V_TVALID),
    .axis_V_V_TREADY(grp_tx_loop_fu_80_axis_V_V_TREADY),
    .ap_done(grp_tx_loop_fu_80_ap_done),
    .ap_start(grp_tx_loop_fu_80_ap_start),
    .ap_ready(grp_tx_loop_fu_80_ap_ready),
    .ap_idle(grp_tx_loop_fu_80_ap_idle),
    .ap_continue(grp_tx_loop_fu_80_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_tx_loop_fu_80_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_tx_loop_fu_80_ap_done <= 1'b0;
        end else if ((grp_tx_loop_fu_80_ap_done == 1'b1)) begin
            ap_sync_reg_grp_tx_loop_fu_80_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_tx_loop_fu_80_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_tx_loop_fu_80_ap_ready <= 1'b0;
        end else if ((grp_tx_loop_fu_80_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_tx_loop_fu_80_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_rx_V_V_0_state <= 2'd0;
    end else begin
        if ((((data_rx_V_V_0_state == 2'd2) & (data_rx_V_V_0_vld_in == 1'b0)) | ((data_rx_V_V_0_state == 2'd3) & (data_rx_V_V_0_vld_in == 1'b0) & (data_rx_V_V_0_ack_out == 1'b1)))) begin
            data_rx_V_V_0_state <= 2'd2;
        end else if ((((data_rx_V_V_0_state == 2'd1) & (data_rx_V_V_0_ack_out == 1'b0)) | ((data_rx_V_V_0_state == 2'd3) & (data_rx_V_V_0_ack_out == 1'b0) & (data_rx_V_V_0_vld_in == 1'b1)))) begin
            data_rx_V_V_0_state <= 2'd1;
        end else if (((~((data_rx_V_V_0_vld_in == 1'b0) & (data_rx_V_V_0_ack_out == 1'b1)) & ~((data_rx_V_V_0_ack_out == 1'b0) & (data_rx_V_V_0_vld_in == 1'b1)) & (data_rx_V_V_0_state == 2'd3)) | ((data_rx_V_V_0_state == 2'd1) & (data_rx_V_V_0_ack_out == 1'b1)) | ((data_rx_V_V_0_state == 2'd2) & (data_rx_V_V_0_vld_in == 1'b1)))) begin
            data_rx_V_V_0_state <= 2'd3;
        end else begin
            data_rx_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_tx_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_tx_V_V_1_ack_out == 1'b1) & (data_tx_V_V_1_vld_out == 1'b1))) begin
            data_tx_V_V_1_sel_rd <= ~data_tx_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_tx_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_tx_V_V_1_ack_in == 1'b1) & (data_tx_V_V_1_vld_in == 1'b1))) begin
            data_tx_V_V_1_sel_wr <= ~data_tx_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_tx_V_V_1_state <= 2'd0;
    end else begin
        if ((((data_tx_V_V_1_vld_in == 1'b0) & (data_tx_V_V_1_state == 2'd2)) | ((data_tx_V_V_1_vld_in == 1'b0) & (data_tx_V_V_1_ack_out == 1'b1) & (data_tx_V_V_1_state == 2'd3)))) begin
            data_tx_V_V_1_state <= 2'd2;
        end else if ((((data_tx_V_V_1_ack_out == 1'b0) & (data_tx_V_V_1_state == 2'd1)) | ((data_tx_V_V_1_ack_out == 1'b0) & (data_tx_V_V_1_vld_in == 1'b1) & (data_tx_V_V_1_state == 2'd3)))) begin
            data_tx_V_V_1_state <= 2'd1;
        end else if (((~((data_tx_V_V_1_vld_in == 1'b0) & (data_tx_V_V_1_ack_out == 1'b1)) & ~((data_tx_V_V_1_ack_out == 1'b0) & (data_tx_V_V_1_vld_in == 1'b1)) & (data_tx_V_V_1_state == 2'd3)) | ((data_tx_V_V_1_ack_out == 1'b1) & (data_tx_V_V_1_state == 2'd1)) | ((data_tx_V_V_1_vld_in == 1'b1) & (data_tx_V_V_1_state == 2'd2)))) begin
            data_tx_V_V_1_state <= 2'd3;
        end else begin
            data_tx_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_tx_loop_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_tx_loop_fu_80_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_tx_loop_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_tx_loop_fu_80_ap_ready == 1'b1)) begin
            grp_tx_loop_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((data_tx_V_V_1_load_A == 1'b1)) begin
        data_tx_V_V_1_payload_A <= grp_tx_loop_fu_80_axis_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_tx_V_V_1_load_B == 1'b1)) begin
        data_tx_V_V_1_payload_B <= grp_tx_loop_fu_80_axis_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tx_buffer_V1_reg_150 <= {{tx_buffer_V[31:3]}};
        tx_final_burst_lengt_reg_155 <= tx_final_burst_lengt_fu_132_p3;
        tx_loop_count_V_reg_160 <= tx_loop_count_V_fu_141_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        DMA_ARVALID = grp_tx_loop_fu_80_m_axi_tx_buffer_V_ARVALID;
    end else begin
        DMA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        DMA_RREADY = grp_tx_loop_fu_80_m_axi_tx_buffer_V_RREADY;
    end else begin
        DMA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (data_tx_V_V_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (data_tx_V_V_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((data_tx_V_V_1_sel == 1'b1)) begin
        data_tx_V_V_1_data_out = data_tx_V_V_1_payload_B;
    end else begin
        data_tx_V_V_1_data_out = data_tx_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_tx_loop_fu_80_ap_continue = 1'b1;
    end else begin
        grp_tx_loop_fu_80_ap_continue = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (data_tx_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_tx_loop_fu_80_ap_ready & ap_sync_grp_tx_loop_fu_80_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_tx_loop_fu_80_ap_done = (grp_tx_loop_fu_80_ap_done | ap_sync_reg_grp_tx_loop_fu_80_ap_done);

assign ap_sync_grp_tx_loop_fu_80_ap_ready = (grp_tx_loop_fu_80_ap_ready | ap_sync_reg_grp_tx_loop_fu_80_ap_ready);

assign data_rx_V_V_0_ack_out = 1'b0;

assign data_rx_V_V_0_vld_in = data_rx_V_V_TVALID;

assign data_rx_V_V_TREADY = data_rx_V_V_0_state[1'd1];

assign data_tx_V_V_1_ack_in = data_tx_V_V_1_state[1'd1];

assign data_tx_V_V_1_ack_out = data_tx_V_V_TREADY;

assign data_tx_V_V_1_load_A = (~data_tx_V_V_1_sel_wr & data_tx_V_V_1_state_cmp_full);

assign data_tx_V_V_1_load_B = (data_tx_V_V_1_state_cmp_full & data_tx_V_V_1_sel_wr);

assign data_tx_V_V_1_sel = data_tx_V_V_1_sel_rd;

assign data_tx_V_V_1_state_cmp_full = ((data_tx_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_tx_V_V_1_vld_in = grp_tx_loop_fu_80_axis_V_V_TVALID;

assign data_tx_V_V_1_vld_out = data_tx_V_V_1_state[1'd0];

assign data_tx_V_V_TDATA = data_tx_V_V_1_data_out;

assign data_tx_V_V_TVALID = data_tx_V_V_1_state[1'd0];

assign grp_tx_loop_fu_80_ap_start = grp_tx_loop_fu_80_ap_start_reg;

assign grp_tx_loop_fu_80_axis_V_V_TREADY = data_tx_V_V_1_state[1'd1];

assign r_V_fu_102_p1 = tx_buffer_length_V[11:0];

assign tmp_4_i_fu_112_p4 = {{tx_buffer_length_V[24:12]}};

assign tmp_6_i_cast_fu_122_p1 = r_V_fu_102_p1;

assign tmp_9_i_fu_126_p2 = (13'd1 + tmp_4_i_fu_112_p4);

assign tmp_i_fu_106_p2 = ((r_V_fu_102_p1 == 12'd0) ? 1'b1 : 1'b0);

assign tx_final_burst_lengt_fu_132_p3 = ((tmp_i_fu_106_p2[0:0] === 1'b1) ? 13'd4096 : tmp_6_i_cast_fu_122_p1);

assign tx_loop_count_V_fu_141_p3 = ((tmp_i_fu_106_p2[0:0] === 1'b1) ? tmp_4_i_fu_112_p4 : tmp_9_i_fu_126_p2);

endmodule //data_mover
